name: Build

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
jobs:
  build:
    name: Build SlateDocs
    runs-on: ubuntu-latest
    env:
      ruby-version: 2.5
      enable-openapi-integration: ${{ github.repository ==  'Sensedia/areadesenvolvedor' && github.ref_name != 'master'}}
      is-deploy-branch: ${{ github.ref_name == 'OPB_Homologacao' || ( github.ref_name == 'master' && github.repository !=  'Sensedia/areadesenvolvedor')  }}

    steps:
      - run: sudo apt-get purge ruby 
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.ruby-version }}
      - uses: actions/setup-python@v1
        with:
          python-version: "3.7"
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: gems-${{ runner.os }}-${{ env.ruby-version }}-${{ hashFiles('**/Gemfile.lock') }}
          
      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - run: npm install -g widdershins
      - run: npm install -g @apidevtools/swagger-cli

      - uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-${{ hashFiles('**/source') }}

      - name: Compile Swagger Files
        run: |
          cd documentation
          bash ./compile-swagger-files.sh

      # Run Spectral
      - uses: stoplightio/spectral-action@v0.7.0
        with:
          file_glob: 'documentation/source/swagger/*_apis.yaml'

      ####################################
      # Open Api Github Repo Integration #
      ####################################
      
      # 1. Clean generated-sources folder
      # 2. Parse YAML to JSON
      # 3. Store GIT variables for next steps
      - name: Parse YAML to JSON and store GIT variables for next steps
        if: ${{ env.enable-openapi-integration }}
        id: repoIntegration
        run: |
          rm -rf ./open-api-repository-integration/generated-sources
          cd open-api-repository-integration
          ruby yaml2json.rb
          cd ..
          echo "::set-output name=git_user_name::$(git --no-pager log --format=format:'%an' -n 1)"
          echo "::set-output name=git_user_email::$(git --no-pager log --format=format:'%ae' -n 1)"
          echo "::set-output name=git_commit_message::$(git --no-pager log --format=format:'%B' -n 1)"

      # 4. Copy generated-source files to 'Sensedia/openapi' and 'Sensedia/draft-openapi' repository (Commit them).
      - name: "'Sensedia/openapi' Integration"
        if: ${{ env.enable-openapi-integration }}
        run: |
          cd open-api-repository-integration
          bash generated-swagger-ui-html.sh
          bash git-repository-integration.sh "${{ steps.repoIntegration.outputs.git_user_email }}"\
           "${{ steps.repoIntegration.outputs.git_user_name }}"\
           "${{ secrets.AREADEV_INTEGRATION }}"\
           "${{ github.ref_name }}"\
           "openapi"\
           "${{ steps.repoIntegration.outputs.git_commit_message }}"
      - name: "'Sensedia/draft-openapi' Integration"
        if: ${{ env.enable-openapi-integration }}
        run: |
          cd open-api-repository-integration
          bash generated-swagger-ui-html.sh
          bash git-repository-integration.sh "${{ steps.repoIntegration.outputs.git_user_email }}"\
           "${{ steps.repoIntegration.outputs.git_user_name }}"\
           "${{ secrets.AREADEV_INTEGRATION }}"\
           "${{ github.ref_name }}"\
           "draft-openapi"\
           "${{ steps.repoIntegration.outputs.git_commit_message }}"

      # 5. Build Portal Site
      - name: Build Portal Site
        if: success() && env.is-deploy-branch == 'true'
        run: |
          cd documentation 
          mv source/versions ..
          bundle config set deployment 'true'
          bundle install
          bundle exec middleman build

      # On success, will run the next steps.
      # 6. Compress build folder in tar.gz format to deploy.
      - name: Compress build folder
        if: success() && env.is-deploy-branch == 'true'
        run: |
          rm -rf build
          mkdir build
          mv documentation/build/* build
          ls -la build
          tar -cvzf build.tar.gz build
          tar -xvzf build.tar.gz

      # 7. Upload build.tar.gz built in previous step to Github repository artifacts.
      - uses: actions/upload-artifact@v2
        if: success() && env.is-deploy-branch == 'true'
        with:
          name: build_folder_artifact
          path: build.tar.gz
          retention-days: 1

      # 8. Invoke Deploy Workflow passing the 'build_id' and 'integration_branch' parameters.
      - name: Invoke deploy workflow
        if: success() && env.is-deploy-branch == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.AREADEV_INTEGRATION }}
          inputs: '{ "build_id": "${{ github.run_id }}" }'