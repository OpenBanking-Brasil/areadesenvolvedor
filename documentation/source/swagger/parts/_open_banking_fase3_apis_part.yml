openapi: 3.0.0
info:
  title: Fase 3 - APIs do Open Banking Brasil
  description: |
    Na fase 3 do Open Banking Brasil, a iniciação de pagamento permitirá que o cliente solicite um pagamento Pix fora dos canais da detentora de conta através de uma iniciadora de transação de pagamento.  

    A solicitação de pagamento será processada apenas se o cliente consentir na iniciadora, através da API de consentimento fase 3, e autorizar na detentora de conta, por meio de autenticação com credenciais de acesso e confirmação dos dados do pagamento.  

    Diferente da fase 2, o consentimento é dado para cada transação e não pode ser revogado, pois é consumido no momento que a transação é confirmada e processada.  

    O processamento da transação é feito de forma instantânea, não sendo possível agendamentos.

    ###Idempotência
    Segundo a W3C, "um método HTTP idempotente é um método HTTP que pode ser chamado muitas vezes sem resultados diferentes ou efeitos colaterais. Não importa se o método é chamado apenas uma vez ou dez vezes. O resultado deve ser o mesmo. Essencialmente, significa que o resultado de uma solicitação executada com sucesso é independente do número de vezes que ela é executada. Por exemplo, na aritmética, adicionar zero a um número é uma operação idempotente."

    Os conhecidos métodos GET, PUT e DELETE são naturalmente idempotentes, assim como HEAD, OPTIONS e TRACE também são.

    Porém, o método POST requer um tratamento especial para que se torne idempotente e, por estarmos tratando aqui de meios de pagamentos, fazer esse tratamento é algo desejável para que não ocorram acidentes.

    ####Por que é necessário tratarmos a Idempotência do POST?

    Imagine que seja realizado um POST de pagamento e, depois de alguns segundos, é retornada uma mensagem de Timeout. Nesse caso, não é possível saber se o POST foi efetivo e enviar o POST novamente, sem tratar a idempotência, poderá ocasionar em duplicidade de pagamento.

    ####Como mitigarmos esse risco?

    Do lado da iniciadora do pagamento: É necessário que seja enviado o POST com um GUID de Idempotência. Caso o mesmo POST seja reenviado por acidente ou precise ser reenviado, por qualquer motivo que seja, basta reenviar o POST com o mesmo GUID de Idempotência.

    Do lado da detentora da conta: É necessário validar o GUID de Idempotência recebido. Caso tenha recebido o mesmo GUID de Idempotência, a nova mensagem de POST deverá ser descartada.

    Importante reforçar que cada nova transação com POST deverá ter um novo GUID de Idempotência.

    A iniciadora não deve usar comportamento idempotente do POST para pesquisar o status dos recursos.

    ####Conjunto inicial de regras propostas na aplicação da idempotencia:
    - A iniciadora/TPP não deve alterar o corpo da solicitação ao usar a mesma chave de idempotência. Se a iniciadora alterar o corpo da solicitação, a detentora/ASPSP não deve modificar o recurso final. A detentora pode tratar este caso como uma ação fraudulenta.  
    - A detentora não deve criar um novo recurso para uma solicitação POST se estiver determinada como uma solicitação idempotente.  
    - Na criação a detentora deve responder à solicitação com o status atual do recurso (ou um status que seja pelo menos tão atual quanto o que estiver disponível nos canais eletrônicos existentes) e um código de status HTTP 201 (CREATED).  
    - A iniciadora não deve usar comportamento idempotente para pesquisar o status dos recursos.  
    - A detentora pode usar a assinatura da mensagem, junto com a chave de idempotência, para garantir que o corpo da solicitação não seja alterado.  

    ###Diagrama de Sequência
    ![Iniciacao_de_Pagamento](images/sequence-diagrams/iniciacao_de_pagamento.png)
    <a href="images/sequence-diagrams/iniciacao_de_pagamento.png" target="_blank">Download do Diagrama de Sequência</a>
    
    #### Descrição do Diagrama de Sequência – APIs Fase 3

    #### Detalhamento do item 1 da iniciação de pagamento:

    1. Debtor (Usuário) inicia o processo de pagamento na iniciadora.  
    2. Na iniciadora, o debtor seleciona a detentora e os dados de pagamentos: <b>Observação</b>: não serão ofertados, no primeiro momento, <b>Pix Saque e Pix troco</b>. Também não será possível agendamentos para <b>Pix QR Codes Dinâmico com vencimento</b>. 
      <a href="https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix" target="_blank">Aqui referências a regulamentação relacionada ao Pix</a>.  
         
        <ol type="a">
          <li>Se transação por Chave Pix ou QR Code Estático:
            <ol type="i">
              <li>É realizada consulta ao DICT (diretório de contas). Observação: se a Iniciadora for um participante direto, detentora ou não de conta, no ecossistema do Pix, ele fará a consulta de forma direta ao DICT. Se a iniciadora for um participante indireto, será necessário consulta por meio de uma instituição com acesso direto com a qual a iniciadora possua relacionamento.  
              </li>
              <li>A iniciadora recebe as informações consultadas:  
                <ol>
                  <li>Dados de chave</li>
                  <li>Nome do creditor</li>
                  <li>Instituição detentora da conta do creditor</li>
                  <li>CPF / CPNJ do creditor</li>
                </ol>
               </li>
            </ol>
          </li>
          <li>Se transação por QR Code Dinâmico:
             <ol type="i">
               <li>É realizada consulta dos dados do QR code do creditor:
                 <ol>
                   <li>CNPJ / CPF</li>
                   <li>Data de vencimento</li>
                   <li>Nome Instituição</li>
                   <li>Endereço (logradouro, cidade, UF e CEP)</li>
                   <li>Identificador</li>
                   <li>Chave Pix</li>
                   <li>Valor Original</li>
                   <li>Valor Final</li>
                   <li>Vencimento</li>
                   <li>Expiração</li>
                  </ol>
              </li>
            </ol>
          </li>
          <li>Se transação por dados manuais (agência e conta):
            <ol type="i">
               <li>Insere-se dados:
                 <ol>
                   <li>Instituição financeira</li>
                   <li>Agência</li>
                   <li>Conta</li>
                   <li>Nome</li>
                   <li>CPF / CNPJ</li>
                 </ol>
              </li>
              <li><b>Observação</b>: não é realizada consulta no creditor ou no DICT.
              </li>
            </ol>
          </li>
        </ol>
 
    3. Após consultas, a iniciadora segue para o fluxo de autorização e consentimento.

    #### Estabelece TLS
    Toda comunicação máquina-a-máquina (m2m) usará mTLS, conforme RFC rfc8705 e detalhado na especificação de segurança: 
      <a href="https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-financial-api-1_ID1.html" target="_blank">Open Banking Brasil Financial-grade API Security Profile 1.0 Implementers Draft 1</a>.

    #### POST /tokens - Pedido de access_token e scope: payments, openid
    Antes de começar o fluxo de iniciação de pagamento, a Instituição Iniciadora deverá ter se cadastrado como *client* na Instituição Detentora da Conta, em acordo com o especificado para o Registro Dinâmico de Clientes (Dynamic Client Registration). Os detalhes dessa etapa podem ser encontrados na especificação de segurança: 
    <a href="https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-dynamic-client-registration-1_ID1.html" target="_blank">Open Banking Brasil Financial-grade API Dynamic Client Registration 1.0 Implementers Draft 1</a>.
    Uma vez cadastrada, a Instituição Iniciadora deverá obter o token de acesso (*access_token*) pelo fluxo de *client credentials*, conforme especificado pela RFC 6749 (rfc6749), com os escopos *payments* e *openid*.

    #### Valida certificado SSL e scopes
    Ao receber a requisição da Iniciadora, o Servidor de Autorização da Instituição Detentora da Conta deverá validar o certificado SSL e os escopos, se esses estão de acordo com a especificação: *payments* e *openid*.

    #### Gera access_token
    Em caso de sucesso da validação, o Servidor de Autorização da Instituição Detentora da Conta deverá gerar o *access_token*, que será utilizado para a criação de consentimento.

    #### Access_token (scope: payments, openid)
    O Servidor de Autorização da Instituição Detentora da Conta deverá responder à requisição com o *access_token* conforme padrões a serem definidos pelo GT de Segurança.

    #### POST /payments/v1/consents
    Para a criação de consentimento, considerando o requerido para FAPI - Loding Intent (<a href="https://bitbucket.org/openid/fapi/src/master/Financial_API_Lodging_Intent.md" target="_blank">Financial_API_Lodging_Intent.md</a>), após a obtenção do token de acesso, a Instituição Iniciadora deverá usar esse token de acesso para fazer a requisição POST de consentimento.
    A criação do consentimento encontra-se detalhada na seção das APIs para Pagamentos (<a href="#em-revisao-criar-consentimento-para-iniciacao-de-pagamento">Open Banking Brasil</a>).

    #### 201 Created
    A API de Consentimento deverá responder o Http Status 201 e Payload contendo ***consentId***, e status inicial do consentimento em **AWAITING_AUTHORISATION** conforme especificado na documentação <a href="#em-revisao-criar-consentimento-para-iniciacao-de-pagamento">Open Banking Brasil</a>.

    #### Redirecionamento
    No caso do consentimento ter sido criado com sucesso, a Instituição Iniciadora deverá fazer o redirecionamento para a Instituição Detentora da Conta. Esse fluxo de redirecionamento deve considerar todos os requisitos definidos para o objeto de requisição OpenID Connect (Seção 4.3 da especificação de segurança - <a href="https://openbanking-brasil.github.io/specs-seguranca/tpp-user-guide.html" target="_blank">Third Party Provider End To End User Guide</a>). 
    Esse redirecionamento é o passo que permitirá o início da autenticação do usuário na Instituição Detentora da Conta.

    #### Efetivação do pagamento&lt;&lt;Assync&gt;&gt;
    A Detentora de Conta efetua a transação de pagamento entre o Debtor e Creditor através da forma de pagamento escolhida pelo Debtor. A efetivação da transação acontece de maneira assíncrona ao fluxo do Open Banking, seguindo as regras e interfaces do arranjo utilizado (apenas PIX disponível nesse momento).

    #### Loop (Polling)
    A Iniciadora deverá consultar periodicamente a Instituição Detentora de Conta para verificar o status da transação de iniciação pagamento. 
    Os possíveis status de uma transação de iniciação de pagamento estão detalhados na documentação (<a href="#tocS_EnumPaymentStatusType">Open Banking Brasil</a>).
    Como sugestão, é indicado que a Instituição Iniciadora do pagamento implemente um retry exponencial e respeite o “rate limite” descriminado na documentação. 
    A recomendações para uso do polling encontra-se detalhada na seção de “Recomendação uso de polling” (<a href="#recomendacao-uso-de-polling">Open Banking Brasil</a>)).

    #### GET pix/payments/{paymentId} 
    Durante o período de polling a Iniciadora deverá consultar o status da transação através da rota “Get pix/payments/{paymentId}” informado o respectivo paymentId da transação.
    A consulta encontra-se detalhada na seção das APIs para Pagamentos (<a href="#em-revisao-pix-consultar-iniciacao-de-pagamento">Open Banking Brasil</a>).
    
    #### Exibe comprovante de iniciação de pagamento
    Caso a Iniciadora identifique que a transação de pagamento foi aprovada pela Detentora de Conta (status “ACCC”), poderá ser exibido o comprovante da **efetivação** da Transação de Pagamento. Caso o status do pagamento seja diferente de “ACCC” e/ou “RJCT”, deverá ser apresentada a efetivação da **solicitação** de Iniciação de Pagamento, apresentando as informações (<a href="#guia-do-usuario-instituicao-receptora-ou-iniciadora-de-pagamentos">segundo Guia de Usuário</a> – “Etapa 6: Efetivação da Solicitação): 
        • Forma de pagamento (de acordo com os arranjos de pagamento vigentes e Circular 4.015);
        • Valor da transação de pagamento (opcional para transações sucessivas);
        • Informações referentes ao Recebedor da Transação de Pagamento;
    Os possíveis status de uma transação de iniciação de pagamento estão detalhados na documentação (<a href="#tocS_EnumPaymentStatusType">Open Banking Brasil</a>).

    ###Recomendação uso de polling
    ####A consulta via GET, para verificar o processamento da transação, pode ser dado a qualquer momento desde que se respeite o rate limit de:  
    - 300 TPS global, 50 TPS por instituição e 8 TPS por endereço IP (Internet Protocol).  
    Como sugestão, é indicado que a instituição iniciadora do pagamento implemente um retry exponencial.  

  version: 1.0.0-rc2.0
tags:
  - name: API - Pagamentos
    description: |
      |Versão|
      |:-----|
      |1.0.0-rc2.0|

      #### Visão Geral
      
      A API tem como objetivo coletar o consentimento e ralizar a iniciação de pagamento entre bancos e instituições financeiras e acessível também à estabelecimentos comerciais participantes do Open Banking Brasil.
      
      Os recursos estão disponíveis para pagadores que possuem vínculo com uma instituição detentora de conta participante do Open Banking, independentemente de serem pessoa física ou jurídica.
      
      #### Especificação em OAS 3.0

      <a href="swagger/swagger_payments_apis.yaml" target="_blank">Download da Especificação (OAS 3.0)</a>  

paths:
  /payments/v1/consents:
    post:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Criar consentimento para iniciação de pagamento."
      operationId: paymentsPostConsents
      description: |
        Método para a criação do consentimento para iniciação de pagamento.

        ### Dicionário de dados

        Campos do retorno do endpoint de `/consents`

        <a href='dictionary/paymentsPostConsents_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
      
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XIdempotencyKey'
        - $ref: '#/components/parameters/XJwsSignature'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentConsent"
        description: Payload para criação do consentimento para iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201PaymentsConsentsConsentCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntityConsents'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - payments
  /payments/v1/consents/{consentId}:
    get:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Consultar consentimento para iniciação de pagamento."
      operationId: paymentsGetConsentsConsentId
      description: |
        Método para consultar o consentimento para iniciação de pagamento.

        ### Dicionário de dados

        Campos do retorno do endpoint de `/consents`

        <a href='dictionary/paymentsGetConsentsConsentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
        
      parameters:
        - $ref: "#/components/parameters/consentId"
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XJwsSignature'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentsConsentsConsentIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - payments
  /payments/v1/pix/payments:
    post:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Pix - Criar iniciação de pagamento."
      operationId: paymentsPostPixPayments
      description: |
        Método para a criação de uma iniciação de pagamento.

        ### Dicionário de dados

        Campos do retorno do endpoint de `/pix/payments`

        <a href='dictionary/paymentsPostPixPayments_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XIdempotencyKey'
        - $ref: '#/components/parameters/XJwsSignature'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePixPayment"
        description: Payload para criação da iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: "#/components/responses/201PaymentsInitiationPixPaymentCreated"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayments'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - payments
  /payments/v1/pix/payments/{paymentId}:
    get:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Pix - Consultar iniciação de pagamento."
      operationId: paymentsGetPixPaymentsPaymentId
      description: |
        Método para consultar uma iniciação de pagamento.

        ### Dicionário de dados

        Campos do retorno do endpoint de `/pix/payments`

        <a href='dictionary/paymentsGetPixPaymentsPaymentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
        
      parameters:
        - $ref: "#/components/parameters/paymentId"
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XJwsSignature'
      responses:
        '200':
          $ref: "#/components/responses/200PaymentsInitiationPixPaymentIdRead"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - payments
components:
  schemas:
    Account:
      $ref: ./schemas/business_commons/Account.yaml
    BusinessEntity:
      $ref: ./schemas/payments_apis/BusinessEntity.yaml
    CreatePaymentConsent:
      $ref: ./schemas/payments_apis/CreatePaymentConsent.yaml
    CreatePixPayment:
      $ref: ./schemas/payments_apis/CreatePixPayment.yaml
    CreatePixPaymentData:
      $ref: ./schemas/payments_apis/CreatePixPaymentData.yaml
    DebtorAccount:
      $ref: ./schemas/business_commons/DebtorAccount.yaml
    EnumAccountPaymentsType:
      $ref: ./schemas/enum/EnumAccountPaymentsType.yaml
    EnumAuthorisationStatusType:
      $ref: ./schemas/enum/EnumAuthorisationStatusType.yaml
    EnumPaymentPersonType:
      $ref: ./schemas/enum/EnumPaymentPersonType.yaml
    EnumPaymentType:
      $ref: ./schemas/enum/EnumPaymentType.yaml
    EnumErrorsCreateConsent:
      $ref: ./schemas/enum/EnumErrorsCreateConsent.yaml
    EnumErrorsCreatePayment:
      $ref: ./schemas/enum/EnumErrorsCreatePayment.yaml
    EnumRejectionReasonType:
      $ref: ./schemas/enum/EnumRejectionReasonType.yaml
    EnumPaymentStatusType:
      $ref: ./schemas/enum/EnumPaymentStatusType.yaml
    CreditorAccount:
      $ref: ./schemas/business_commons/CreditorAccount.yaml
    Identification:
      $ref: ./schemas/payments_apis/PaymentIdentification.yaml
    LoggedUser:
      $ref: ./schemas/payments_apis/LoggedUser.yaml
    PaymentConsent:
      $ref: ./schemas/payments_apis/PaymentConsent.yaml
    PaymentPix:
      $ref: ./schemas/payments_apis/PaymentPix.yaml
    ResponseError:
      $ref: ./schemas/ResponseError.yaml
    422ResponseErrorCreateConsent:
      $ref: ./schemas/payments_apis/422ResponseErrorCreateConsent.yaml
    422ResponseErrorCreatePixPayment:
      $ref: ./schemas/payments_apis/422ResponseErrorCreatePixPayment.yaml
    ResponsePaymentConsent:
      $ref: ./schemas/payments_apis/ResponsePaymentConsent.yaml
    ResponsePixPayment:
      $ref: ./schemas/payments_apis/ResponsePixPayment.yaml
    ResponsePixPaymentData:
      $ref: ./schemas/payments_apis/ResponsePixPaymentData.yaml
    Links:
      $ref: ./schemas/Links.yaml
    Meta:
      $ref: ./schemas/Meta.yaml
  parameters:
    consentId:
      $ref: ./parameters/ConsentId.yaml
    paymentId:
      $ref: ./parameters/PaymentId.yaml
    Authorization:
      $ref: ./parameters/Authorization.yaml
    xCustomerUserAgent:
      $ref: ./parameters/XCustomerUserAgent.yaml
    xFapiAuthDate:
      $ref: ./parameters/XFapiAuthDate.yaml
    xFapiCustomerIpAddress:
      $ref: ./parameters/XFapiCustomerIpAddress.yaml
    xFapiInteractionId:
      $ref: ./parameters/XFapiInteractionId.yaml
    XIdempotencyKey:
      $ref: ./parameters/XIdempotencyKey.yaml
    XJwsSignature:
      $ref: ./parameters/XJwsSignature.yaml
  responses:
    BadRequest:
      $ref: ./responses/payments_apis/BadRequest.yaml
    Forbidden:
      $ref: ./responses/payments_apis/Forbidden.yaml
    InternalServerError:
      $ref: ./responses/payments_apis/InternalServerError.yaml
    MethodNotAllowed:
      $ref: ./responses/payments_apis/MethodNotAllowed.yaml
    NotAcceptable:
      $ref: ./responses/payments_apis/NotAcceptable.yaml
    NotFound:
      $ref: ./responses/payments_apis/NotFound.yaml
    TooManyRequests:
      $ref: ./responses/payments_apis/TooManyRequests.yaml
    UnprocessableEntityConsents:
      $ref: ./schemas/payments_apis/UnprocessableEntityConsents.yaml
    UnprocessableEntityPixPayments:
      $ref: ./schemas/payments_apis/UnprocessableEntityPixPayments.yaml
    Unauthorized:
      $ref: ./responses/payments_apis/Unauthorized.yaml
    UnsupportedMediaType:
      $ref: ./responses/payments_apis/UnsupportedMediaType.yaml
    201PaymentsConsentsConsentCreated:
      description: Consentimento de pagamento criado com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml           
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePaymentConsent'
    200PaymentsConsentsConsentIdRead:
      description: Dados do consentimento de pagamento obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePaymentConsent'
    201PaymentsInitiationPixPaymentCreated:
      description: Iniciação de pagamento Pix criada com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml           
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePixPayment'
    200PaymentsInitiationPixPaymentIdRead:
      description: Dados de iniciação de pagamento Pix obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePixPayment'
