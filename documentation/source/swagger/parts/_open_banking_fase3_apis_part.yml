openapi: 3.0.0
info:
  title: Fase 3 - APIs do Open Banking Brasil
  description: |
    ### Iniciação de pagamentos

    Na fase 3 do Open Banking Brasil  será oferecida aos clientes a possibilidade de movimentação financeira a partir de aplicativos e plataformas externas ao ambiente no qual mantém sua conta.

    Na prática o que teremos é a oferta de pagamentos, transferências e outras operações executadas a partir de aplicativos de terceiros, sempre com a prévia coleta do consentimento do cliente para a iniciação destas transações.

    No âmbito da Resolução conjunta nº 1, de 04 de maio de 2020 o Open Banking Brasil passa a contar com os atores e operações ali definidos, reproduzidos a seguir.

    #### Instituição detentora de conta

    É a instituição participante do Open Banking que possui a capacidade de ofertar quaisquer dos tipos de conta a seguir: conta de depósitos à vista (conta-corrente), conta de poupança, conta-salário e conta de pagamento pré-paga, guardando similaridade com o conceito de [ASPSP](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Faccount-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801583820%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jeezEb6FpQnpx7uz2v3NAf2FYuSOps13d8VvR9kiRS8%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Faccount-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801583820%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jeezEb6FpQnpx7uz2v3NAf2FYuSOps13d8VvR9kiRS8%3D&amp;reserved=0>) - Account Servicing Payment Service Provider do modelo britânico.

    No contexto do Open Banking as instituições detentoras de conta deverão observar critérios de segurança e conformidade previamente definidos.

    Consulte neste [link](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Faspsp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=LYglRitKRsQgc2LUIlgmHnfs%2BuBWPuw6TEdM7ZanORE%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Faspsp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=LYglRitKRsQgc2LUIlgmHnfs%2BuBWPuw6TEdM7ZanORE%3D&amp;reserved=0>) as especificações de segurança aplicáveis.

    #### Instituição iniciadora de transação de pagamento

    É a instituição participante que presta serviço de iniciação de transação de pagamento sem deter em momento algum os fundos transferidos na prestação do serviço.

    De forma análoga ao caso das detentoras de conta, as iniciadoras mantém certo grau de similaridade com o conceito de [TPP](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Fthird-party-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=AwM0i68xyxbQVEgYe9gIzWXUdUJuHX22GsGBARFP0r8%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Fthird-party-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=AwM0i68xyxbQVEgYe9gIzWXUdUJuHX22GsGBARFP0r8%3D&amp;reserved=0>) - Third Party Provider do modelo britânico, devendo também observar critérios específicos de segurança, conforme detalhado neste [link](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Ftpp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jM1KEOJPgixn6XE98%2BHERACS3ZOjXcYzMbazr3KiCMs%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Ftpp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jM1KEOJPgixn6XE98%2BHERACS3ZOjXcYzMbazr3KiCMs%3D&amp;reserved=0>).


    #### Serviço de iniciação de transação de pagamento

    É o serviço que possibilita a iniciação da instrução de uma transação de pagamento, ordenado pelo cliente, relativamente a uma conta de depósitos à vista (conta-corrente),  conta-salário, conta de poupança ou conta de pagamento pré-paga.

    Inicialmente o Open Banking estará disponibilizando a iniciação de Pix com execução na data corrente.

    Futuramente com a evolução do ecossistema novas modalidades de operações serão agregadas, assim como a possibilidade de agendamentos.

    ### Idempotência

    Segundo a W3C, "um método HTTP idempotente é um método HTTP que pode ser chamado muitas vezes sem resultados diferentes ou efeitos colaterais. Não importa se o método é chamado apenas uma vez ou dez vezes. O resultado deve ser o mesmo. Essencialmente, significa que o resultado de uma solicitação executada com sucesso é independente do número de vezes que ela é executada. Por exemplo, na aritmética, adicionar zero a um número é uma operação idempotente."

    Os conhecidos métodos GET, PUT e DELETE são naturalmente idempotentes, assim como HEAD, OPTIONS e TRACE também são.

    Porém, o método POST requer um tratamento especial para que se torne idempotente e, por estarmos tratando aqui de meios de pagamentos, fazer esse tratamento é algo desejável para que não ocorram acidentes.

    #### Por que é necessário tratarmos a Idempotência do POST?

    Imagine que seja realizado um POST de pagamento e, depois de alguns segundos, é retornada uma mensagem de Timeout. Nesse caso, não é possível saber se o POST foi efetivo e enviar o POST novamente, sem tratar a idempotência, poderá ocasionar em duplicidade de pagamento.

    #### Como mitigarmos esse risco?

    Do lado da iniciadora do pagamento: É necessário que seja enviado o POST com um GUID de Idempotência. Caso o mesmo POST seja reenviado por acidente ou precise ser reenviado, por qualquer motivo que seja, basta reenviar o POST com o mesmo GUID de Idempotência.

    Do lado da detentora da conta: É necessário validar o GUID de Idempotência recebido. Caso tenha recebido o mesmo GUID de Idempotência, a nova mensagem de POST deverá ser descartada.

    Importante reforçar que cada nova transação com POST deverá ter um novo GUID de Idempotência.

    A iniciadora não deve usar comportamento idempotente do POST para pesquisar o status dos recursos.

    #### Conjunto inicial de regras propostas na aplicação da idempotencia:

    - A iniciadora/TPP não deve alterar o corpo da solicitação ao usar a mesma chave de idempotência. Se a iniciadora alterar o corpo da solicitação, a detentora/ASPSP não deve modificar o recurso final. A detentora pode tratar este caso como uma ação fraudulenta.  
    - A detentora não deve criar um novo recurso para uma solicitação POST se estiver determinada como uma solicitação idempotente.  
    - Na criação a detentora deve responder à solicitação com o status atual do recurso (ou um status que seja pelo menos tão atual quanto o que estiver disponível nos canais eletrônicos existentes) e um código de status HTTP 201 (CREATED).  
    - A iniciadora não deve usar comportamento idempotente para pesquisar o status dos recursos.  
    - A detentora pode usar a assinatura da mensagem, junto com a chave de idempotência, para garantir que o corpo da solicitação não seja alterado.  

    ### Diagrama de Sequência
    ![Iniciacao_de_Pagamento](images/sequence-diagrams/iniciacao_de_pagamento.png)
    <a href="images/sequence-diagrams/iniciacao_de_pagamento.png" target="_blank">Download do Diagrama de Sequência</a>
    
    #### Descrição do Diagrama de Sequência – APIs Fase 3

    #### Detalhamento da iniciação de pagamento:

    1. Debtor (Usuário) inicia o processo de pagamento na iniciadora.  
    2. Na iniciadora, o debtor seleciona a detentora e os dados de pagamentos:  
    <b>Observação</b>: não serão ofertados, no primeiro momento, <b>Pix Saque e Pix troco</b>. Também não será possível agendamentos para <b>Pix QR Codes Dinâmico com vencimento</b>. 
      <a href="https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix" target="_blank">Aqui referências a regulamentação relacionada ao Pix</a>.  
         
        <ol type="a">
          <li>Se transação por Chave Pix ou QR Code Estático:
            <ol type="i">
              <li>É realizada consulta ao DICT (diretório de contas).<br>
              <b>Observação</b>: se a Iniciadora for um participante direto, detentora ou não de conta, no ecossistema do Pix, ele fará a consulta de forma direta ao DICT. Se a iniciadora for um participante indireto, será necessário consulta por meio de uma instituição com acesso direto com a qual a iniciadora possua relacionamento.  
              </li>
              <li>A iniciadora recebe as informações consultadas:  
                <ol>
                  <li>Dados de chave</li>
                  <li>Nome do creditor</li>
                  <li>Instituição detentora da conta do creditor</li>
                  <li>CPF / CPNJ do creditor</li>
                </ol>
               </li>
            </ol>
          </li>
          <li>Se transação por QR Code Dinâmico:
             <ol type="i">
               <li>É realizada consulta dos dados do QR code do creditor:
                 <ol>
                   <li>CNPJ / CPF</li>
                   <li>Data de vencimento</li>
                   <li>Nome Instituição</li>
                   <li>Endereço (logradouro, cidade, UF e CEP)</li>
                   <li>Identificador</li>
                   <li>Chave Pix</li>
                   <li>Valor Original</li>
                   <li>Valor Final</li>
                   <li>Vencimento</li>
                   <li>Expiração</li>
                  </ol>
              </li>
            </ol>
          </li>
          <li>Se transação por dados manuais (agência e conta):
            <ol type="i">
               <li>Insere-se dados:
                 <ol>
                   <li>Instituição financeira</li>
                   <li>Agência</li>
                   <li>Conta</li>
                   <li>Nome</li>
                   <li>CPF / CNPJ</li>
                 </ol>
              </li>
              <li><b>Observação</b>: não é realizada consulta no creditor ou no DICT.
              </li>
            </ol>
          </li>
        </ol>
 
    3. Após consultas, a iniciadora segue para o fluxo de autorização e consentimento.

    #### Estabelece TLS
    Toda comunicação máquina-a-máquina (m2m) usará mTLS, conforme RFC rfc8705 e detalhado na especificação de segurança: 
      <a href="https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-financial-api-1_ID1.html" target="_blank">Open Banking Brasil Financial-grade API Security Profile 1.0 Implementers Draft 1</a>.

    #### POST /tokens - Pedido de access_token e scope: payments, openid
    Antes de começar o fluxo de iniciação de pagamento, a Instituição Iniciadora deverá ter se cadastrado como *client* na Instituição Detentora da Conta, em acordo com o especificado para o Registro Dinâmico de Clientes (Dynamic Client Registration). Os detalhes dessa etapa podem ser encontrados na especificação de segurança: 
    <a href="https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-dynamic-client-registration-1_ID1.html" target="_blank">Open Banking Brasil Financial-grade API Dynamic Client Registration 1.0 Implementers Draft 1</a>.  
    Uma vez cadastrada, a Instituição Iniciadora deverá obter o token de acesso (*access_token*) pelo fluxo de *client credentials*, conforme especificado pela RFC 6749 (rfc6749), com os escopos *payments* e *openid*.

    #### Valida certificado SSL e scopes
    Ao receber a requisição da Iniciadora, o Servidor de Autorização da Instituição Detentora da Conta deverá validar o certificado SSL e os escopos, se esses estão de acordo com a especificação: *payments* e *openid*.

    #### Gera access_token
    Em caso de sucesso da validação, o Servidor de Autorização da Instituição Detentora da Conta deverá gerar o *access_token*, que será utilizado para a criação de consentimento.

    #### Access_token (scope: payments, openid)
    O Servidor de Autorização da Instituição Detentora da Conta deverá responder à requisição com o *access_token* conforme padrões a serem definidos pelo GT de Segurança.

    #### POST /payments/v1/consents
    Para a criação de consentimento, considerando o requerido para FAPI - Loding Intent (<a href="https://bitbucket.org/openid/fapi/src/master/Financial_API_Lodging_Intent.md" target="_blank">Financial_API_Lodging_Intent.md</a>), após a obtenção do token de acesso, a Instituição Iniciadora deverá usar esse token de acesso para fazer a requisição POST de consentimento.  
    A criação do consentimento encontra-se detalhada na seção das APIs para Pagamentos (<a href="#em-revisao-criar-consentimento-para-iniciacao-de-pagamento">Open Banking Brasil</a>).

    #### 201 Created
    A API de Consentimento deverá responder o Http Status 201 e Payload contendo ***consentId***, e status inicial do consentimento em **AWAITING_AUTHORISATION** conforme especificado na documentação <a href="#em-revisao-criar-consentimento-para-iniciacao-de-pagamento">Open Banking Brasil</a>.

    #### Redirecionamento
    No caso do consentimento ter sido criado com sucesso, a Instituição Iniciadora deverá fazer o redirecionamento para a Instituição Detentora da Conta. Esse fluxo de redirecionamento deve considerar todos os requisitos definidos para o objeto de requisição OpenID Connect (Seção 4.3 da especificação de segurança - <a href="https://openbanking-brasil.github.io/specs-seguranca/tpp-user-guide.html" target="_blank">Third Party Provider End To End User Guide</a>).  
    Esse redirecionamento é o passo que permitirá o início da autenticação do usuário na Instituição Detentora da Conta.

    #### Validações de negócios (Detentora)

    Ao receber o POST /pix/payments é importante observar que a Detentora deverá validar as informações passadas pela Iniciadora nos campos do payload de envio do consentimento e do pagamento (como, por exemplo, valores e dados do creditado), além de ser necessário decodificar o código para os casos de pagamentos iniciados a partir de um Pix QRCode, a fim de que a Detentora carregue as informações complementares (como, por exemplo, o TxID) na mensageria do Pix (atenção para a PACS008 e as <a href="https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix" target="_blank">regulamentações do Pix</a>).

    #### Efetivação do pagamento&lt;&lt;Assync&gt;&gt;
    A Detentora de Conta efetua a transação de pagamento entre o Debtor e Creditor através da forma de pagamento escolhida pelo Debtor. A efetivação da transação acontece de maneira assíncrona ao fluxo do Open Banking, seguindo as regras e interfaces do arranjo utilizado (apenas PIX disponível nesse momento).

    #### Loop (Polling)
    A Iniciadora deverá consultar periodicamente a Instituição Detentora de Conta para verificar o status da transação de iniciação pagamento.  
    Os possíveis status de uma transação de iniciação de pagamento estão detalhados na documentação (<a href="#tocS_EnumPaymentStatusType">Open Banking Brasil</a>).  
    Como sugestão, é indicado que a Instituição Iniciadora do pagamento implemente um retry exponencial e respeite o “rate limit” descriminado na documentação.  
    A recomendação para uso do polling encontra-se detalhada na seção de “Recomendação uso de polling” (<a href="#recomendacao-uso-de-polling">Open Banking Brasil</a>)).

    #### GET pix/payments/{paymentId} 
    Durante o período de polling a Iniciadora deverá consultar o status da transação através da rota “Get pix/payments/{paymentId}” informado o respectivo paymentId da transação.  
    A consulta encontra-se detalhada na seção das APIs para Pagamentos (<a href="#em-revisao-pix-consultar-iniciacao-de-pagamento">Open Banking Brasil</a>).
    
    #### Exibe comprovante de iniciação de pagamento
    Caso a Iniciadora identifique que a transação de pagamento foi aprovada pela Detentora de Conta (status “ACCC”), poderá ser exibido o comprovante da **efetivação** da Transação de Pagamento. Caso o status do pagamento seja diferente de “ACCC” e/ou “RJCT”, deverá ser apresentada a efetivação da **solicitação** de Iniciação de Pagamento, apresentando as informações (<a href="#guia-do-usuario-instituicao-receptora-ou-iniciadora-de-pagamentos">segundo Guia de Usuário</a> – “Etapa 6: Efetivação da Solicitação):

      - Forma de pagamento (de acordo com os arranjos de pagamento vigentes e Circular 4.015);
      - Valor da transação de pagamento (opcional para transações sucessivas);
      - Informações referentes ao Recebedor da Transação de Pagamento;

    Os possíveis status de uma transação de iniciação de pagamento estão detalhados na documentação (<a href="#tocS_EnumPaymentStatusType">Open Banking Brasil</a>).

    ### Maquina de Estados
    #### Os possíveis status do consentimento são:  
      
    AWAITING_AUTHORISATION - Aguardando autorização  
    AUTHORISED - Autorizado   
    REJECTED - Rejeitado  
    CONSUMED - Consumido

    ![Maquina de Estados](images/sequence-diagrams/state-machine_phase3.png)  
    <a href="images/sequence-diagrams/state-machine_phase3.png" target="_blank">Download da Maquina de Estados</a>
    
    Algumas definições são importantes para tratar a transição dos estados do consentimento em diferentes momentos do fluxo:  

    #### AWAITING_AUTHORISATION
    - O consentimento é sempre criado com o status AWAITING_AUTHORISATION e deve assumir o status AUTHORISED ou REJECTED  antes do tempo de expiração de 5 minutos.  

    #### AUTHORISED
    - Para o cenário em que o status assumiu AUTHORISED, o tempo máximo do expirationDateTime do consentimento deve assumir "now + 60 minutos". Este é o tempo para consumir o consentimento autorizado, mudando seu status para CONSUMED. Não é possível prorrogar este tempo e a criação de um novo consentimento será necessária para os cenários de insucesso. O tempo do expirationDateTime é garantido com os 15 minutos do access token, sendo possível utilizar mais três refresh tokens até totalizar 60 minutos.  
    
    ##### REJECTED
    - Em caso de consentimento expirado a Detentora deverá retornar o status REJECTED.  
    - Em caso de consentimento rejeitado pelo usuário ou por regra de negócio da Detentora, o status deverá ser retornado como REJECTED.  
   
    #### CONSUMED
    - O consentimento assume o status CONSUMED após ocorrer o processamento da iniciação do pagamento, seja ele com sucesso (HTTP 201) ou ainda em casos de insucesso (HTTP 422) retornados pela Detentora. Para os demais códigos HTTP não há mudança de status do consentimento, o mesmo permanecerá AUTHORISED, respeitando o tempo máximo de expiração do consentimento (60 minutos).    
    

    ### Recomendação uso de polling
    #### A consulta via GET, para verificar o processamento da transação, pode ser efetuada a qualquer momento desde que se respeite o rate limit de:  
    - 300 TPS global, 50 TPS por instituição e 8 TPS por endereço IP (Internet Protocol).  
    Como sugestão, é indicado que a instituição iniciadora do pagamento implemente um retry exponencial.  

    ### Controle de acesso

    O endpoint de consulta de pagamento GET /pix/payments/{​​​paymentId}​​​ deve suportar acesso a partir de access_token emitido por meio de um grant_type do tipo `client credentials`, como opção do uso do token vinculado ao consentimento (hybrid flow).  
    Para evitar vazamento de informação, a detentora deve validar que o pagamento consultado pertence ao `client_id` que o criou e, caso haja divergências, retorne um erro HTTP 400.  
    
    ### Como assinar o payload

    No contexto da API Payment Initiation, os payloads de mensagem de consentimento e de pagamento que trafegam tanto por parte da instituição iniciadora de transação de pagamento quanto por parte da instituição detentora de conta devem estar assinados. Abaixo temos as orientações para assinatura das mensagens JWS.  

    - **Passo 1** - Identifique a chave privada e o certificado de assinatura correspondente a serem usados para assinatura:

    A Iniciadora deve usar uma chave privada que tenha um certificado digital correspondente (que contém a chave pública correspondente) emitido pelo Open Banking Brasil.

    O certificado de assinatura deve ser válido no momento da criação do JWS.
    
    - **Passo 2** - Geração do JOSE Header

    O JOSE Header deve conter os seguintes campos:

    |Nome|Tipo|Obrigatório|Descrição|
    |---|---|---|---|---|
    |alg|string|true|O algoritmo que será usado para assinar o JWS. Deve ser preenchido com o valor `PS256`.|
    |kid|string|true|Deve ser obrigatoriamente preenchido com o valor do identificador da chave utilizado para a assinatura.|
    |typ|string|true|É o tipo de conteúdo usado para trafegar mensagens na API. Deve ser preenchido com o valor `JWT`.|

    - **Passo 3** - Montando a mensagem JWS

    Para garantir a integridade e o não-repúdio das informações tramitadas em *API´s sensíveis e que indicam essa necessidade na sua documentação*, deve ser adotado a estrutura no padrão JWS definida na [<a href="https://datatracker.ietf.org/doc/html/rfc7515" target="_blank">RFC7515</a>] e que inclui:

    **Cabeçalho** (_JSON Object Signing and Encryption – JOSE Header_), onde se define o algoritmo utilizado e inclui informações sobre a chave pública ou certificado que podem ser utilizadas para validar a assinatura;
    
    **Payload** (_JWS Payload_): conteúdo propriamente dito e detalhado na especificação da API além de informações sobre `claims` JWT ;
    
    **Assinatura digital** (_JWS Signature_): assinatura digital, realizada conforme parâmetros do cabeçalho.

    O payload das mensagens (requisição JWT_ e resposta JWT) assinadas devem incluir as seguintes `claims` presentes na [<a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1" target="_blank">RFC7519</a>] (JWT):

    |Nome|Tipo|Obrigatório|Descrição|
    |---|---|---|---|---|
    |aud|string|true|(***requisição JWT***): o Provedor do Recurso (p. ex. a instituição Detentora da Conta) deverá validar se o valor do campo **aud** coincide com o endpoint sendo acionado.<br>(***resposta JWT***): o cliente da API (p. ex. instituição Iniciadora) deverá validar se o valor do campo **aud** coincide com o seu próprio `organisationId` listado no diretório.|
    |iss|string|true|(***requisição JWT*** e ***resposta JWT***): o receptor da mensagem deverá validar se o valor do campo **iss** coincide com o seu prório `organisationId` listado no diretório.|
    |jti|string|true|(***requisição JWT*** e ***resposta JWT***): o valor do campo **jti** deverá ser preenchido com o UUID definido pela instituição de acordo com a <a href="https://datatracker.ietf.org/doc/html/rfc4122" target="_blank">RFC 4122</a> usando o versão 4.|
    |iat|string|true|(***requisição JWT*** e ***resposta JWT***): o valor do campo **iat** deverá ser preenchido com o horário da geração da mensagem e de acordo com o padrão estabelecido na <a href="https://datatracker.ietf.org/doc/html/rfc7519#section-2" target="_blank">RFC7519</a> para o formato _NumericDate_|

    Cada elemento acima deve ser codificado utilizando o padrão Base64url [<a href="https://datatracker.ietf.org/doc/html/rfc4648#section-5" target="_blank">RFC4648</a>] e, feito isso, os elementos devem ser concatenados com “.” (método JWS Compact Serialization, conforme definido na [<a href="https://datatracker.ietf.org/doc/html/rfc7515#section-3.1" target="_blank">RFC7515</a>]).

    Formato da mensagem JWS:

    <span style="background: #e9e8e8; padding: 3px;">**payload** = Base64url(**JOSEHeader**)  +  "." + Base64url(**payload json**)  +  "."  +  Base64url(**digital signature**)</span>

    Veja ao lado exemplo de mensagem JWS assinada e codificada e um exemplo de mensagem JWS decodificada.

    > Exemplo de requisição JWS assinada e codificada

    ```json
    {
      eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.
      eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJkYXRhIjp7ImxvZ2dlZFVzZXIiOnsiZG9jdW1lbnQiOnsiaWRlbnRpZmljYXRpb24iOiIxMTExMTExMTExMSIsInJlb
      CI6IkNQRiJ9fSwiYnVzaW5lc3NFbnRpdHkiOnsiZG9jdW1lbnQiOnsiaWRlbnRpZmljYXRpb24iOiIxMTExMTExMTExMTExMSIsInJlbCI6IkNOUEoifX0sImNyZWRpdG9yIjp7InBlcnNvblR5cGUiOiJQRVNTT0FfTk
      FUVVJBTCIsImNwZkNucGoiOiI1ODc2NDc4OTAwMDEzNyIsIm5hbWUiOiJNYXJjbyBBbnRvbmlvIGRlIEJyaXRvIn0sInBheW1lbnQiOnsidHlwZSI6IlBJWCIsImRhdGUiOiIyMDIxLTAxLTAxIiwiY3VycmVuY3kiOiJ
      CUkwiLCJhbW91bnQiOiIxMDAwMDAuMTIifSwiZGVidG9yQWNjb3VudCI6eyJpc3BiIjoiMTIzNDU2NzgiLCJpc3N1ZXIiOiIxNzc0IiwibnVtYmVyIjoiMTIzNDU2Nzg5MCIsImFjY291bnRUeXBlIjoiQ0FDQyJ9fX0.
      pmy1BPKWcUi-_cErF9yld2EYsTMGpSKIDXCmcGJlzB9nlCn2s3xTWO7ZS9EImkZlojaXNi1NmY5_-l_Rpx5aASs9RCW04D_BoSmNW8sNrzAoF9P5Yy92ymvOJQbqxnLVpmG9DTpmk50QqoWQEK5QMbXoc1yiVoXKrc9dJ
      R9qlrsBeRt52mv33nuZPi0f6lEP9nqsQiKj4adyN_hWeozyiMxYOmuFh9xmFvDJefSHojmLMMsxLBvriRmcB9c-MaGvUbxe9PTWPNiL-qBPTpJmO82LkfuVIo0VJZXuVCGRDxAJ5J0i502bzXSC96iwJFwvE5iFbNwD
      Il0HRICaEShFyw
    }
    ```
        
    Em caso de erro na validação da assinatura pelo Provedor do Recurso a API deve retornar mensagem de erro `HTTP` com status code `400` e a resposta deve incluir na propriedade code do objeto de resposta de erro especificado na API (ResponseError) a indicação da falha com o conteúdo `BAD_SIGNATURE`.  

    Informações complementares de segurança podem ser consultadas em <a href="https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-financial-api-1_ID2-ptbr.md" target="_blank"> https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-financial-api-1_ID2-ptbr.md</a>
    
    > Exemplo de requisição JWS decodificada

    ```json
    {
      "alg": "PS256",
      "kid": "imNEXb2RM58wAdlzCgX5FkyCyibRNC4mvUew2sSaCos",
      "typ": "JWT"
    }  
    {
      "iss": "ca1b98e1-97a2-43db-947f-8a08054c342e",
      "aud": "https://api.banco.com.br/open-banking/payments/v1/consents",
      "iat": "1628257484",
      "jti": "a2fd393c-107a-4ad4-be22-3cfeeea90efe",
      "data": {
          "loggedUser": {
              "document": {
                  "identification": "11111111111",
                  "rel": "CPF"
              }
          },
          "businessEntity": {
              "document": {
                  "identification": "11111111111111",
                  "rel": "CNPJ"
              }
          },
          "creditor": {
              "personType": "PESSOA_NATURAL",
              "cpfCnpj": "58764789000137",
              "name": "Marco Antonio de Brito"
          },
          "payment": {
              "type": "PIX",
              "date": "2021-01-01",
              "currency": "BRL",
              "amount": "100000.12"
          },
          "debtorAccount": {
              "ispb": "12345678",
              "issuer": "1774",
              "number": "1234567890",
              "accountType": "CACC"
          }
    }
    ```

    > Exemplo de resposta JWS decodificado

    ```json
    {
    "aud": "3449bf21-0b07-48e6-b6fc-13eb161a9901", 
    "iss": "ca1b98e1-97a2-43db-947f-8a08054c342e", 
    "jti": "a2fd393c-107a-4ad4-be22-3cfeeea90efe", 
    "iat": "1628257737",
    "data": {
      "consentId": "urn:bancoex:C1DD33123",
      "creationDateTime": "2021-05-21T08:30:00Z",
      "expirationDateTime": "2021-05-21T08:30:00Z",
      "statusUpdateDateTime": "2021-05-21T08:30:00Z",
      "status": "AWAITING_AUTHORISATION",
      "loggedUser": {
        "document": {
          "identification": "11111111111",
          "rel": "CPF"
        }
      },
      "businessEntity": {
        "document": {
          "identification": "11111111111111",
          "rel": "CNPJ"
        }
      },
      "creditor": {
        "personType": "PESSOA_NATURAL",
        "cpfCnpj": "58764789000137",
        "name": "Marco Antonio de Brito"
      },
      "payment": {
        "type": "PIX",
        "date": "2021-01-01",
        "currency": "BRL",
        "amount": "100000.12"
      },
      "debtorAccount": {
        "ispb": "12345678",
        "issuer": "1774",
        "number": "1234567890",
        "accountType": "CACC"
      }
    },
    "links": {
      "self": https://api.banco.com.br/open-banking/api/v1/resource
    },
    "meta": {
      "totalRecords": 1,
      "totalPages": 1,
      "requestDateTime": "2021-05-21T08:30:00Z"
    }
  }

        
  version: 1.0.0-rc5.3
tags:
  - name: API - Pagamentos
    description: |
      |Versão|
      |:-----|
      |1.0.0-rc5.3|

      #### Visão Geral
      
      A API tem como objetivo coletar o consentimento e ralizar a iniciação de pagamento entre bancos e instituições financeiras e acessível também à estabelecimentos comerciais participantes do Open Banking Brasil.
      
      Os recursos estão disponíveis para pagadores que possuem vínculo com uma instituição detentora de conta participante do Open Banking, independentemente de serem pessoa física ou jurídica.
      
      #### Especificação em OAS 3.0

      <a href="swagger/swagger_payments_apis.yaml" target="_blank">Download da Especificação (OAS 3.0)</a>  

paths:
  /payments/v1/consents:
    post:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Criar consentimento para iniciação de pagamento."
      operationId: paymentsPostConsents
      description: |
        Método para a criação do consentimento para iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/consents`

        <a href='dictionary/paymentsPostConsents_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
        
        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).
   
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentConsent"
        description: Payload para criação do consentimento para iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201PaymentsConsentsConsentCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntityConsents'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
  /payments/v1/consents/{consentId}:
    get:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Consultar consentimento para iniciação de pagamento."
      operationId: paymentsGetConsentsConsentId
      description: |
        Método para consultar o consentimento para iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/consents`

        <a href='dictionary/paymentsGetConsentsConsentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
        
        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).
        
      parameters:
        - $ref: "#/components/parameters/consentId"
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentsConsentsConsentIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
  /payments/v1/pix/payments:
    post:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Pix - Criar iniciação de pagamento."
      operationId: paymentsPostPixPayments
      description: |
        Método para a criação de uma iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/pix/payments`

        <a href='dictionary/paymentsPostPixPayments_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
        
        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).

      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePixPayment"
        description: Payload para criação da iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: "#/components/responses/201PaymentsInitiationPixPaymentCreated"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayments'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
  /payments/v1/pix/payments/{paymentId}:
    get:
      tags:
        - API - Pagamentos
      summary: "[Em Revisão] Pix - Consultar iniciação de pagamento."
      operationId: paymentsGetPixPaymentsPaymentId
      description: |
        Método para consultar uma iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/pix/payments`.  
  
        <a href='dictionary/paymentsGetPixPaymentsPaymentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>
        
        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).

      parameters:
        - $ref: "#/components/parameters/paymentId"
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
      responses:
        '200':
          $ref: "#/components/responses/200PaymentsInitiationPixPaymentIdRead"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
components:
  schemas:
    422ResponseErrorCreateConsent:
      $ref: ./schemas/payments_apis/422ResponseErrorCreateConsent.yaml
    422ResponseErrorCreatePixPayment:
      $ref: ./schemas/payments_apis/422ResponseErrorCreatePixPayment.yaml
    Account:
      $ref: ./schemas/business_commons/Account.yaml
    BusinessEntity:
      $ref: ./schemas/payments_apis/BusinessEntity.yaml
    CreatePaymentConsent:
      $ref: ./schemas/payments_apis/CreatePaymentConsent.yaml
    CreatePixPayment:
      $ref: ./schemas/payments_apis/CreatePixPayment.yaml
    CreatePixPaymentData:
      $ref: ./schemas/payments_apis/CreatePixPaymentData.yaml
    CreditorAccount:
      $ref: ./schemas/business_commons/CreditorAccount.yaml
    DebtorAccount:
      $ref: ./schemas/business_commons/DebtorAccount.yaml
    EndToEndId:
      $ref: ./schemas/business_commons/EndToEndId.yaml
    EnumAccountPaymentsType:
      $ref: ./schemas/enum/EnumAccountPaymentsType.yaml
    EnumAuthorisationStatusType:
      $ref: ./schemas/enum/EnumAuthorisationStatusType.yaml
    EnumErrorsCreateConsent:
      $ref: ./schemas/enum/EnumErrorsCreateConsent.yaml
    EnumErrorsCreatePayment:
      $ref: ./schemas/enum/EnumErrorsCreatePayment.yaml
    EnumLocalInstrument:
      $ref: ./schemas/enum/EnumLocalInstrument.yaml
    EnumPaymentPersonType:
      $ref: ./schemas/enum/EnumPaymentPersonType.yaml
    EnumPaymentStatusType:
      $ref: ./schemas/enum/EnumPaymentStatusType.yaml
    EnumPaymentType:
      $ref: ./schemas/enum/EnumPaymentType.yaml
    EnumRejectionReasonType:
      $ref: ./schemas/enum/EnumRejectionReasonType.yaml
    Identification:
      $ref: ./schemas/payments_apis/PaymentIdentification.yaml
    Links:
      $ref: ./schemas/Links.yaml
    LoggedUser:
      $ref: ./schemas/payments_apis/LoggedUser.yaml
    Meta:
      $ref: ./schemas/Meta.yaml
    PaymentConsent:
      $ref: ./schemas/payments_apis/PaymentConsent.yaml
    PaymentPix:
      $ref: ./schemas/payments_apis/PaymentPix.yaml
    ResponseError:
      $ref: ./schemas/ResponseError.yaml
    ResponsePaymentConsent:
      $ref: ./schemas/payments_apis/ResponsePaymentConsent.yaml
    ResponsePixPayment:
      $ref: ./schemas/payments_apis/ResponsePixPayment.yaml
    ResponsePixPaymentData:
      $ref: ./schemas/payments_apis/ResponsePixPaymentData.yaml
  parameters:
    consentId:
      $ref: ./parameters/ConsentId.yaml
    paymentId:
      $ref: ./parameters/PaymentId.yaml
    Authorization:
      $ref: ./parameters/Authorization.yaml
    xCustomerUserAgent:
      $ref: ./parameters/XCustomerUserAgent.yaml
    xFapiAuthDate:
      $ref: ./parameters/XFapiAuthDate.yaml
    xFapiCustomerIpAddress:
      $ref: ./parameters/XFapiCustomerIpAddress.yaml
    xFapiInteractionId:
      $ref: ./parameters/XFapiInteractionId.yaml
    XIdempotencyKey:
      $ref: ./parameters/XIdempotencyKey.yaml
  responses:
    BadRequest:
      $ref: ./responses/payments_apis/BadRequest.yaml
    Forbidden:
      $ref: ./responses/payments_apis/Forbidden.yaml
    InternalServerError:
      $ref: ./responses/payments_apis/InternalServerError.yaml
    MethodNotAllowed:
      $ref: ./responses/payments_apis/MethodNotAllowed.yaml
    NotAcceptable:
      $ref: ./responses/payments_apis/NotAcceptable.yaml
    NotFound:
      $ref: ./responses/payments_apis/NotFound.yaml
    TooManyRequests:
      $ref: ./responses/payments_apis/TooManyRequests.yaml
    UnprocessableEntityConsents:
      $ref: ./schemas/payments_apis/UnprocessableEntityConsents.yaml
    UnprocessableEntityPixPayments:
      $ref: ./schemas/payments_apis/UnprocessableEntityPixPayments.yaml
    Unauthorized:
      $ref: ./responses/payments_apis/Unauthorized.yaml
    UnsupportedMediaType:
      $ref: ./responses/payments_apis/UnsupportedMediaType.yaml
    201PaymentsConsentsConsentCreated:
      description: Consentimento de pagamento criado com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml           
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePaymentConsent'
    200PaymentsConsentsConsentIdRead:
      description: Dados do consentimento de pagamento obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePaymentConsent'
    201PaymentsInitiationPixPaymentCreated:
      description: Iniciação de pagamento Pix criada com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml           
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePixPayment'
    200PaymentsInitiationPixPaymentIdRead:
      description: Dados de iniciação de pagamento Pix obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: ./headers/XFapiInteractionId.yaml
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePixPayment'
