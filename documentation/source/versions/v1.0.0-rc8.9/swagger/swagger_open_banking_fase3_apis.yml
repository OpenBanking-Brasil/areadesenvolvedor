openapi: 3.0.0
info:
  title: Fase 3 - APIs do Open Banking Brasil
  description: "### Iniciação de pagamentos\n\nNa fase 3 do Open Banking Brasil  será oferecida aos clientes a possibilidade de movimentação financeira a partir de aplicativos e plataformas externas ao ambiente no qual mantém sua conta.\n\nNa prática o que teremos é a oferta de pagamentos, transferências e outras operações executadas a partir de aplicativos de terceiros, sempre com a prévia coleta do consentimento do cliente para a iniciação destas transações.\n\nNo âmbito da Resolução conjunta nº 1, de 04 de maio de 2020 o Open Banking Brasil passa a contar com os atores e operações ali definidos, reproduzidos a seguir.\n\n#### Instituição detentora de conta\n\nÉ a instituição participante do Open Banking que possui a capacidade de ofertar quaisquer dos tipos de conta a seguir: conta de depósitos à vista (conta-corrente), conta de poupança, conta-salário e conta de pagamento pré-paga, guardando similaridade com o conceito de [ASPSP](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Faccount-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801583820%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jeezEb6FpQnpx7uz2v3NAf2FYuSOps13d8VvR9kiRS8%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Faccount-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801583820%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jeezEb6FpQnpx7uz2v3NAf2FYuSOps13d8VvR9kiRS8%3D&amp;reserved=0>) - Account Servicing Payment Service Provider do modelo britânico.\n\nNo contexto do Open Banking as instituições detentoras de conta deverão observar critérios de segurança e conformidade previamente definidos.\n\nConsulte neste [link](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Faspsp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=LYglRitKRsQgc2LUIlgmHnfs%2BuBWPuw6TEdM7ZanORE%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Faspsp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=LYglRitKRsQgc2LUIlgmHnfs%2BuBWPuw6TEdM7ZanORE%3D&amp;reserved=0>) as especificações de segurança aplicáveis.\n\n#### Instituição iniciadora de transação de pagamento\n\nÉ a instituição participante que presta serviço de iniciação de transação de pagamento sem deter em momento algum os fundos transferidos na prestação do serviço.\n\nDe forma análoga ao caso das detentoras de conta, as iniciadoras mantém certo grau de similaridade com o conceito de [TPP](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Fthird-party-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=AwM0i68xyxbQVEgYe9gIzWXUdUJuHX22GsGBARFP0r8%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.openbanking.org.uk%2Fproviders%2Fthird-party-providers%2F&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=AwM0i68xyxbQVEgYe9gIzWXUdUJuHX22GsGBARFP0r8%3D&amp;reserved=0>) - Third Party Provider do modelo britânico, devendo também observar critérios específicos de segurança, conforme detalhado neste [link](https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Ftpp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jM1KEOJPgixn6XE98%2BHERACS3ZOjXcYzMbazr3KiCMs%3D&amp;reserved=0<https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fopenbanking-brasil.github.io%2Fspecs-seguranca%2Ftpp-user-guide.html&amp;data=04%7C01%7Cclara.rohrmann%40bancointer.com.br%7C213ed77ede5b4e2af08c08d93226dbf8%7C05e665c9c5024a1998a5a913a6f52be8%7C1%7C0%7C637595964801593818%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;sdata=jM1KEOJPgixn6XE98%2BHERACS3ZOjXcYzMbazr3KiCMs%3D&amp;reserved=0>).\n\n\n#### Serviço de iniciação de transação de pagamento\n\nÉ o serviço que possibilita a iniciação da instrução de uma transação de pagamento, ordenado pelo cliente, relativamente a uma conta de depósitos à vista (conta-corrente),  conta-salário, conta de poupança ou conta de pagamento pré-paga.\n\nInicialmente o Open Banking estará disponibilizando a iniciação de Pix com execução na data corrente.\n\nFuturamente com a evolução do ecossistema novas modalidades de operações serão agregadas, assim como a possibilidade de agendamentos.\n\n#### Iniciação pelo Recebedor  \nIniciação pelo recebedor ocorre quando a prestação de serviço pela iniciadora é para, e somente para,  o recebedor. Nestes casos somente será permitido como beneficiário do pagamento o próprio recebedor. Algumas Instituições Detentoras de conta precisarão ajustar seus sistemas de forma a apropriar o campo em sua estrutura ao invés de gerá-lo nos casos pertinentes.  \n\n### Idempotência\n\nSegundo a W3C, \"um método HTTP idempotente é um método HTTP que pode ser chamado muitas vezes sem resultados diferentes ou efeitos colaterais. Não importa se o método é chamado apenas uma vez ou dez vezes. O resultado deve ser o mesmo. Essencialmente, significa que o resultado de uma solicitação executada com sucesso é independente do número de vezes que ela é executada. Por exemplo, na aritmética, adicionar zero a um número é uma operação idempotente.\"\n\nOs conhecidos métodos GET, PUT e DELETE são naturalmente idempotentes, assim como HEAD, OPTIONS e TRACE também são.\n\nPorém, o método POST requer um tratamento especial para que se torne idempotente e, por estarmos tratando aqui de meios de pagamentos, fazer esse tratamento é algo desejável para que não ocorram acidentes.\n\n#### Por que é necessário tratarmos a Idempotência do POST?\n\nImagine que seja realizado um POST de pagamento e, depois de alguns segundos, é retornada uma mensagem de Timeout. Nesse caso, não é possível saber se o POST foi efetivo e enviar o POST novamente, sem tratar a idempotência, poderá ocasionar em duplicidade de pagamento.\n\n#### Como mitigarmos esse risco?\n\nDo lado da iniciadora do pagamento: É necessário que seja enviado o POST com um GUID de Idempotência. Caso o mesmo POST seja reenviado por acidente ou precise ser reenviado, por qualquer motivo que seja, basta reenviar o POST com o mesmo GUID de Idempotência.\n\nDo lado da detentora da conta: É necessário validar o GUID de Idempotência recebido. Caso tenha recebido o mesmo GUID de Idempotência, a nova mensagem de POST deverá ser descartada.\n\nImportante reforçar que cada nova transação com POST deverá ter um novo GUID de Idempotência.\n\nA iniciadora não deve usar comportamento idempotente do POST para pesquisar o status dos recursos.\n\n#### Conjunto inicial de regras propostas na aplicação da idempotencia:\n\n- A iniciadora/TPP não deve alterar o corpo da solicitação ao usar a mesma chave de idempotência. Se a iniciadora alterar o corpo da solicitação, a detentora/ASPSP não deve modificar o recurso final. A detentora pode tratar este caso como uma ação fraudulenta.  \n- A detentora não deve criar um novo recurso para uma solicitação POST se estiver determinada como uma solicitação idempotente.  \n- Na criação a detentora deve responder à solicitação com o status atual do recurso (ou um status que seja pelo menos tão atual quanto o que estiver disponível nos canais eletrônicos existentes) e um código de status HTTP 201 (CREATED).  \n- A iniciadora não deve usar comportamento idempotente para pesquisar o status dos recursos.  \n- A detentora pode usar a assinatura da mensagem, junto com a chave de idempotência, para garantir que o corpo da solicitação não seja alterado.  \n\n### Diagrama de Sequência\n![Iniciacao_de_Pagamento](images/sequence-diagrams/iniciacao_de_pagamento.png)\n<a href=\"images/sequence-diagrams/iniciacao_de_pagamento.png\" target=\"_blank\">Download do Diagrama de Sequência</a>\n\n#### Descrição do Diagrama de Sequência – APIs Fase 3\n\n#### Detalhamento da iniciação de pagamento:\n\n1. Debtor (Usuário) inicia o processo de pagamento na iniciadora.  \n2. Na iniciadora, o debtor seleciona a detentora e os dados de pagamentos:  \n<b>Observação</b>: não serão ofertados, no primeiro momento, <b>Pix Saque e Pix troco</b>. Também não será possível agendamentos para <b>Pix QR Codes Dinâmico com vencimento</b>. \n  <a href=\"https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix\" target=\"_blank\">Aqui referências a regulamentação relacionada ao Pix</a>.  \n     \n    <ol type=\"a\">\n      <li>Se transação por Chave Pix ou QR Code Estático:\n        <ol type=\"i\">\n          <li>É realizada consulta ao DICT (diretório de contas).<br>\n          <b>Observação</b>: se a Iniciadora for um participante direto, detentora ou não de conta, no ecossistema do Pix, ele fará a consulta de forma direta ao DICT. Se a iniciadora for um participante indireto, será necessário consulta por meio de uma instituição com acesso direto com a qual a iniciadora possua relacionamento.  \n          </li>\n          <li>A iniciadora recebe as informações consultadas:  \n            <ol>\n              <li>Dados de chave</li>\n              <li>Nome do creditor</li>\n              <li>Instituição detentora da conta do creditor</li>\n              <li>CPF / CPNJ do creditor</li>\n            </ol>\n           </li>\n        </ol>\n      </li>\n      <li>Se transação por QR Code Dinâmico:\n         <ol type=\"i\">\n           <li>É realizada consulta dos dados do QR code do creditor:\n             <ol>\n               <li>CNPJ / CPF</li>\n               <li>Data de vencimento</li>\n               <li>Nome Instituição</li>\n               <li>Endereço (logradouro, cidade, UF e CEP)</li>\n               <li>Identificador</li>\n               <li>Chave Pix</li>\n               <li>Valor Original</li>\n               <li>Valor Final</li>\n               <li>Vencimento</li>\n               <li>Expiração</li>\n              </ol>\n          </li>\n        </ol>\n      </li>\n      <li>Se transação por dados manuais (agência e conta):\n        <ol type=\"i\">\n           <li>Insere-se dados:\n             <ol>\n               <li>Instituição financeira</li>\n               <li>Agência</li>\n               <li>Conta</li>\n               <li>Nome</li>\n               <li>CPF / CNPJ</li>\n             </ol>\n          </li>\n          <li><b>Observação</b>: não é realizada consulta no creditor ou no DICT.\n          </li>\n        </ol>\n      </li>\n    </ol>\n\n3. Após consultas, a iniciadora segue para o fluxo de autorização e consentimento.\n\n#### Estabelece TLS\nToda comunicação máquina-a-máquina (m2m) usará mTLS, conforme RFC rfc8705 e detalhado na especificação de segurança: \n  <a href=\"https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-financial-api-1_ID1.html\" target=\"_blank\">Open Banking Brasil Financial-grade API Security Profile 1.0 Implementers Draft 1</a>.\n\n#### POST /tokens - Pedido de access_token e scope: payments, openid\nAntes de começar o fluxo de iniciação de pagamento, a Instituição Iniciadora deverá ter se cadastrado como *client* na Instituição Detentora da Conta, em acordo com o especificado para o Registro Dinâmico de Clientes (Dynamic Client Registration). Os detalhes dessa etapa podem ser encontrados na especificação de segurança:\_\n<a href=\"https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-dynamic-client-registration-1_ID1.html\" target=\"_blank\">Open Banking Brasil Financial-grade API Dynamic Client Registration 1.0 Implementers Draft 1</a>.  \nUma vez cadastrada, a Instituição Iniciadora deverá obter o token de acesso (*access_token*) pelo fluxo de *client credentials*, conforme especificado pela RFC 6749 (rfc6749), com os escopos *payments* e *openid*.\n\n#### Valida certificado SSL e scopes\nAo receber a requisição da Iniciadora, o Servidor de Autorização da Instituição Detentora da Conta deverá validar o certificado SSL e os escopos, se esses estão de acordo com a especificação: *payments* e *openid*.\n\n#### Gera access_token\nEm caso de sucesso da validação, o Servidor de Autorização da Instituição Detentora da Conta deverá gerar o *access_token*, que será utilizado para a criação de consentimento.\n\n#### Access_token (scope: payments, openid)\nO Servidor de Autorização da Instituição Detentora da Conta deverá responder à requisição com o *access_token* conforme padrões a serem definidos pelo GT de Segurança.\n\n#### POST /payments/v1/consents\nPara a criação de consentimento, considerando o requerido para FAPI - Loding Intent (<a href=\"https://bitbucket.org/openid/fapi/src/master/Financial_API_Lodging_Intent.md\" target=\"_blank\">Financial_API_Lodging_Intent.md</a>), após a obtenção do token de acesso, a Instituição Iniciadora deverá usar esse token de acesso para fazer a requisição POST de consentimento.  \nA criação do consentimento encontra-se detalhada na seção das APIs para Pagamentos (<a href=\"#em-revisao-criar-consentimento-para-iniciacao-de-pagamento\">Open Banking Brasil</a>).  \n\n#### 201 Created\nA API de Consentimento deverá responder o Http Status 201 e Payload contendo ***consentId***, e status inicial do consentimento em **AWAITING_AUTHORISATION** conforme especificado na documentação <a href=\"#em-revisao-criar-consentimento-para-iniciacao-de-pagamento\">Open Banking Brasil</a>.\n\n#### Redirecionamento\nNo caso do consentimento ter sido criado com sucesso, a Instituição Iniciadora deverá fazer o redirecionamento para a Instituição Detentora da Conta. Esse fluxo de redirecionamento deve considerar todos os requisitos definidos para o objeto de requisição OpenID Connect (Seção 4.3 da especificação de segurança -\_<a href=\"https://openbanking-brasil.github.io/specs-seguranca/tpp-user-guide.html\" target=\"_blank\">Third Party Provider End To End User Guide</a>).  \nEsse redirecionamento é o passo que permitirá o início da autenticação do usuário na Instituição Detentora da Conta.\n\n#### Validações de negócios (Detentora)\nAo receber o POST /payments/v1/pix/payments é importante observar que a Detentora deverá validar as informações passadas pela Iniciadora nos campos do payload de envio do consentimento e do pagamento (como, por exemplo, valores e dados do creditado), além de ser necessário decodificar o código para os casos de pagamentos iniciados a partir de um Pix QRCode, a fim de que a Detentora carregue as informações complementares (como, por exemplo, o TxID) na mensageria do Pix (atenção para a PACS008 e as <a href=\"https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix\" target=\"_blank\">regulamentações do Pix</a>).   \nA Detentora deve validar as informações de detalhes do payload com os dados de detalhes do consentimento, de acordo com a forma de pagamento. Caso os dados do detalhe informados no consentimento sejam diferente dos dados enviados na iniciação de pagamento, a Detentora de retornar erro HTTP 422 Unprocessable Entity, com o code BENEFICIARIO_INCOMPATIVEL.  \n\n#### Efetivação do pagamento&lt;&lt;Assync&gt;&gt;\nA Detentora de Conta efetua a transação de pagamento entre o Debtor e Creditor através da forma de pagamento escolhida pelo Debtor. A efetivação da transação acontece de maneira assíncrona ao fluxo do Open Banking, seguindo as regras e interfaces do arranjo utilizado (apenas PIX disponível nesse momento).\n\n#### Loop (Polling)\nA Iniciadora deverá consultar periodicamente a Instituição Detentora de Conta para verificar o status da transação de iniciação pagamento.  \nOs possíveis status de uma transação de iniciação de pagamento estão detalhados na documentação\_(<a href=\"#tocS_EnumPaymentStatusType\">Open Banking Brasil</a>).  \nComo sugestão, é indicado que a Instituição Iniciadora do pagamento implemente um retry exponencial e respeite o “rate limit” descriminado na documentação.  \nA recomendação para uso do polling encontra-se detalhada na seção de “Recomendação uso de polling” (<a href=\"#recomendacao-uso-de-polling\">Open Banking Brasil</a>)).\n\n#### GET pix/payments/{paymentId} \nDurante o período de polling a Iniciadora deverá consultar\_o status da transação através da rota “Get pix/payments/{paymentId}” informado o respectivo paymentId da transação.  \nA consulta\_encontra-se detalhada na seção das APIs para Pagamentos (<a href=\"#em-revisao-pix-consultar-iniciacao-de-pagamento\">Open Banking Brasil</a>).\n\n#### Exibe comprovante de iniciação de pagamento\nCaso a Iniciadora identifique que a transação de pagamento foi aprovada pela Detentora de Conta (status “ACCC”),\_poderá ser exibido o comprovante da **efetivação** da Transação de Pagamento. Caso o status do pagamento seja diferente de “ACCC” e/ou “RJCT”, deverá ser apresentada a efetivação da **solicitação** de Iniciação de Pagamento, apresentando as informações (<a href=\"#guia-do-usuario-instituicao-receptora-ou-iniciadora-de-pagamentos\">segundo Guia de Usuário</a> – “Etapa 6: Efetivação da Solicitação):\n\n  - Forma de pagamento (de acordo com os arranjos de pagamento vigentes e Circular 4.015);\n  - Valor da transação de pagamento (opcional para transações sucessivas);\n  - Informações referentes ao Recebedor da Transação de Pagamento;\n\nOs possíveis status de uma transação de iniciação de pagamento estão detalhados na documentação\_(<a href=\"#tocS_EnumPaymentStatusType\">Open Banking Brasil</a>).\n\n### Máquina de Estados\n#### Os possíveis status do consentimento são:  \n  \nAWAITING_AUTHORISATION - Aguardando autorização  \nAUTHORISED - Autorizado   \nREJECTED - Rejeitado  \nCONSUMED - Consumido\n\n![Maquina de Estados](images/sequence-diagrams/state-machine_phase3.png)  \n<a href=\"images/sequence-diagrams/state-machine_phase3.png\" target=\"_blank\">Download da Máquina de Estados</a>\n\nAlgumas definições são importantes para tratar a transição dos estados do consentimento em diferentes momentos do fluxo:  \n\n#### AWAITING_AUTHORISATION\n- O consentimento é sempre criado com o status AWAITING_AUTHORISATION e deve assumir o status AUTHORISED ou REJECTED  antes do tempo de expiração de 5 minutos.  \n\n#### AUTHORISED\n- Para o cenário em que o status assumiu AUTHORISED, o tempo máximo do expirationDateTime do consentimento deve assumir \"now + 60 minutos\". Este é o tempo para consumir o consentimento autorizado, mudando seu status para CONSUMED. Não é possível prorrogar este tempo e a criação de um novo consentimento será necessária para os cenários de insucesso. O tempo do expirationDateTime é garantido com os 15 minutos do access token, sendo possível utilizar mais três refresh tokens até totalizar 60 minutos.  \n\n##### REJECTED\n- Em caso de consentimento expirado a Detentora deverá retornar o status REJECTED.  \n- Em caso de consentimento rejeitado pelo usuário ou por regra de negócio da Detentora, o status deverá ser retornado como REJECTED.  \n\n#### CONSUMED\n- O consentimento assume o status CONSUMED após ocorrer o processamento da iniciação do pagamento, seja ele com sucesso (HTTP 201) ou ainda em casos de insucesso (HTTP 422) retornados pela Detentora. Para os demais códigos HTTP não há mudança de status do consentimento, o mesmo permanecerá AUTHORISED, respeitando o tempo máximo de expiração do consentimento (60 minutos).    \n  \n### Recomendação uso de polling\n#### A consulta via GET, para verificar o processamento da transação, pode ser efetuada a qualquer momento desde que se respeite o rate limit de:  \n- 300 TPS global, 50 TPS por instituição e 8 TPS por endereço IP (Internet Protocol).  \nComo sugestão, é indicado que a instituição iniciadora do pagamento implemente um retry exponencial.  \n\n### Controle de acesso\n\nO endpoint de consulta de pagamento GET /pix/payments/{​​​paymentId}​​​ deve suportar acesso a partir de access_token emitido por meio de um _grant_type_ do tipo `client credentials`, como opção do uso do token vinculado ao consentimento (hybrid flow).  \nPara evitar vazamento de informação, a detentora deve validar que o pagamento consultado pertence ao `client_id` que o criou e, caso haja divergências, retorne um erro HTTP 400.  \n\n### Como assinar o payload  \n\nNo contexto da API Payment Initiation, os payloads de mensagem de consentimento e de pagamento que trafegam tanto por parte da instituição iniciadora de transação de pagamento quanto por parte da instituição detentora de conta devem estar assinados. Abaixo temos as orientações para assinatura das mensagens JWS.  \n\nInformações complementares de segurança podem ser consultadas em <a href=\"https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-financial-api-1_ID2-ptbr.md\" target=\"_blank\"> https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-financial-api-1_ID2-ptbr.md</a>.\n\n- **Passo 1** - Identifique a chave privada e o certificado de assinatura correspondente a serem usados para assinatura:\n\nAs assinaturas devem ser realizadas com uso do certificado digital de assinatura especificado no <a href=\"https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-certificate-standards-1_ID1-ptbr.md#certificado-de-assinatura-certificadoassinatura\" target=\"_blank\">Padrão de Certificados Open Banking Brasil</a>.\n\nO certificado de assinatura deve ser válido no momento da criação do JWS.\n\n- **Passo 2** - Geração do JOSE Header\n\nO JOSE Header deve conter os seguintes campos:\n\n|Nome|Tipo|Obrigatório|Descrição|\n|---|---|---|---|---|\n|alg|string|true|O algoritmo que será usado para assinar o JWS. Deve ser preenchido com o valor `PS256`.|\n|kid|string|true|Deve ser obrigatoriamente preenchido com o valor do identificador da chave utilizado para a assinatura.|\n|typ|string|true|É o tipo de conteúdo usado para trafegar mensagens na API. Deve ser preenchido com o valor `JWT`.|\n\n- **Passo 3** - Montando a mensagem JWS\n\nPara garantir a integridade e o não-repúdio das informações tramitadas em *API´s sensíveis e que indicam essa necessidade na sua documentação*, deve ser adotado a estrutura no padrão JWS definida na [<a href=\"https://datatracker.ietf.org/doc/html/rfc7515\" target=\"_blank\">RFC7515</a>] e que inclui:\n\n**Cabeçalho** (_JSON Object Signing and Encryption – JOSE Header_), onde se define o algoritmo utilizado e inclui informações sobre a chave pública ou certificado que podem ser utilizadas para validar a assinatura;\n\n**Payload** (_JWS Payload_): conteúdo propriamente dito e detalhado na especificação da API além de informações sobre `claims` JWT ;\n\n**Assinatura digital** (_JWS Signature_): assinatura digital, realizada conforme parâmetros do cabeçalho.\n\nO payload das mensagens (requisição e resposta _JWT_) assinadas devem incluir as seguintes `claims` presentes na [<a href=\"https://datatracker.ietf.org/doc/html/rfc7519#section-4.1\" target=\"_blank\">RFC7519</a>] (JWT):\n\n|Nome|Tipo|Obrigatório|Descrição|\n|---|---|---|---|---|\n|aud|string|true|(***requisição JWT***): o Provedor do Recurso (p. ex. a instituição Detentora da Conta) deverá validar se o valor do campo **aud** coincide com o endpoint sendo acionado.<br>(***resposta JWT***): o cliente da API (p. ex. instituição Iniciadora) deverá validar se o valor do campo **aud** coincide com o seu próprio `organisationId` listado no diretório.|\n|iss|string|true|(***requisição JWT*** e ***resposta JWT***): o receptor da mensagem deverá validar se o valor do campo **iss** coincide com o `organisationId` da outra parte listado no diretório.|\n|jti|string|true|(***requisição JWT*** e ***resposta JWT***): o valor do campo **jti** deverá ser preenchido com o UUID definido pela instituição de acordo com a <a href=\"https://datatracker.ietf.org/doc/html/rfc4122\" target=\"_blank\">RFC 4122</a> usando o versão 4.|\n|iat|string|true|(***requisição JWT*** e ***resposta JWT***): o valor do campo **iat** deverá ser preenchido com o horário da geração da mensagem e de acordo com o padrão estabelecido na <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#section-2\" target=\"_blank\">RFC7519</a> para o formato _NumericDate_|\n\nCada elemento acima deve ser codificado utilizando o padrão Base64url [<a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\" target=\"_blank\">RFC4648</a>] e, feito isso, os elementos devem ser concatenados com “.” (método JWS Compact Serialization, conforme definido na [<a href=\"https://datatracker.ietf.org/doc/html/rfc7515#section-3.1\" target=\"_blank\">RFC7515</a>]).\n\nFormato da mensagem JWS:\n\n<span style=\"background: #e9e8e8; padding: 3px;\">**payload** = Base64url(**JOSEHeader**)  +  \".\" + Base64url(**payload JWT**)  +  \".\"  +  Base64url(**digital signature**)</span>\n\nVeja ao lado exemplo de mensagem JWS assinada e codificada e um exemplo de mensagem JWS decodificada.\n\n> Exemplo de requisição - JWS assinada e codificada\n\n```json\n  eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlBXQWk1cnVRY0hmelB6cTJKRmRwWTduQVVoNkx6VFRRdERCVXBPTTM3SlEifQ.\n  eyJhdWQiOiJodHRwczovL2FwaS5iYW5jby5jb20uYnIvb3BlbmJhbmtpbmcvcGF5bWVudHMvdjEvY29uc2VudHMiLCJpc3MiOiI1NjQ3ZmU5MC1mNmJjLTExZWItOWEwMy0wMjQyYWMxMzAwMDMiLCJqdGkiOiI3OTYwNTc3Yy02NjJjLTQ1NmUtOGNmNS1lNjMwODI4YWY2MzUiLCJpYXQiOiIxNjI4MjU3NDg0IiwiZGF0YSI6eyJsb2dnZWRVc2VyIjp7ImRvY3VtZW50Ijp7ImlkZW50aWZpY2F0aW9uIjoiMTExMTExMTExMTEiLCJyZWwiOiJDUEYifX0sImJ1c2luZXNzRW50aXR5Ijp7ImRvY3VtZW50Ijp7ImlkZW50aWZpY2F0aW9uIjoiMTExMTExMTExMTExMTEiLCJyZWwiOiJDTlBKIn19LCJjcmVkaXRvciI6eyJwZXJzb25UeXBlIjoiUEVTU09BX05BVFVSQUwiLCJjcGZDbnBqIjoiNTg3NjQ3ODkwMDAxMzciLCJuYW1lIjoiTWFyY28gQW50b25pbyBkZSBCcml0byJ9LCJwYXltZW50Ijp7InR5cGUiOiJQSVgiLCJkYXRlIjoiMjAyMS0wMS0wMSIsImN1cnJlbmN5IjoiQlJMIiwiYW1vdW50IjoiMTAwMDAwLjEyIn0sImRlYnRvckFjY291bnQiOnsiaXNwYiI6IjEyMzQ1Njc4IiwiaXNzdWVyIjoiMTc3NCIsIm51bWJlciI6IjEyMzQ1Njc4OTAiLCJhY2NvdW50VHlwZSI6IkNBQ0MifX19.\n  QPeCCkH45tZ4kMRYwLNIFXnHGIe0smk5V1qVrM7Iw_YcNUbla45ThCFzU_NEeYx3FaPJko_PIGWzxC62c_yrh0R5yYpGJ_V4PZxGer27p_tZgyJ_x7MZbMkMaRqO8w9rcfa8FrNc9zBXbkdh2D0GmC_fDtAV5F-ndYhaztH2w-G5OGg7S57wifA4HVq11vQLmk5p3VjKFA530KALurU5kRmAfgK0mYA6_EaOtXiQTeP06_gu6g9JIenGLaDVeKLXKTtv8YhCZhoO_eHNBdAmmFJTQW_zPQrKnlj1Qo6XJIgRQ0sqigV9lOOOQNWjpFwZ2DYYcXbdHumCznlN_yb5yw\n```\n\n> Exemplo de requisição - JWS decodificada\n\n```json\n{\n  \"alg\": \"PS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"PWAi5ruQcHfzPzq2JFdpY7nAUh6LzTTQtDBUpOM37JQ\"\n}\n{\n  \"aud\": \"https://api.banco.com.br/openbanking/payments/v1/consents\",\n  \"iss\": \"5647fe90-f6bc-11eb-9a03-0242ac130003\",\n  \"jti\": \"7960577c-662c-456e-8cf5-e630828af635\",\n  \"iat\": \"1628257484\",\n  \"data\": {\n    \"loggedUser\": {\n      \"document\": {\n        \"identification\": \"11111111111\",\n        \"rel\": \"CPF\"\n      }\n    },\n    \"businessEntity\": {\n      \"document\": {\n        \"identification\": \"11111111111111\",\n        \"rel\": \"CNPJ\"\n      }\n    },\n    \"creditor\": {\n      \"personType\": \"PESSOA_NATURAL\",\n      \"cpfCnpj\": \"58764789000137\",\n      \"name\": \"Marco Antonio de Brito\"\n    },\n    \"payment\": {\n      \"type\": \"PIX\",\n      \"date\": \"2021-01-01\",\n      \"currency\": \"BRL\",\n      \"amount\": \"100000.12\"\n    },\n    \"debtorAccount\": {\n      \"ispb\": \"12345678\",\n      \"issuer\": \"1774\",\n      \"number\": \"1234567890\",\n      \"accountType\": \"CACC\"\n    }\n  }\n} \n\n* \"Assinatura omitida por questões de brevidade\"\n\n```\n\n > Exemplo de resposta - JWS assinada e codificada\n\n```json\n  eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlBXQWk1cnVRY0hmelB6cTJKRmRwWTduQVVoNkx6VFRRdERCVXBPTTM3SlEifQ.\n  eyJhdWQiOiIzNDQ5YmYyMS0wYjA3LTQ4ZTYtYjZmYy0xM2ViMTYxYTk5MDEiLCJpc3MiOiJjYTFiOThlMS05N2EyLTQzZGItOTQ3Zi04YTA4MDU0YzM0MmUiLCJqdGkiOiJhMmZkMzkzYy0xMDdhLTRhZDQtYmUyMi0zY2ZlZWVhOTBlZmUiLCJpYXQiOiIxNjI4MjU3NzM3IiwiZGF0YSI6eyJjb25zZW50SWQiOiJ1cm46YmFuY29leDpDMUREMzMxMjMiLCJjcmVhdGlvbkRhdGVUaW1lIjoiMjAyMS0wNS0yMVQwODozMDowMFoiLCJleHBpcmF0aW9uRGF0ZVRpbWUiOiIyMDIxLTA1LTIxVDA4OjMwOjAwWiIsInN0YXR1c1VwZGF0ZURhdGVUaW1lIjoiMjAyMS0wNS0yMVQwODozMDowMFoiLCJzdGF0dXMiOiJBV0FJVElOR19BVVRIT1JJU0FUSU9OIiwibG9nZ2VkVXNlciI6eyJkb2N1bWVudCI6eyJpZGVudGlmaWNhdGlvbiI6IjExMTExMTExMTExIiwicmVsIjoiQ1BGIn19LCJidXNpbmVzc0VudGl0eSI6eyJkb2N1bWVudCI6eyJpZGVudGlmaWNhdGlvbiI6IjExMTExMTExMTExMTExIiwicmVsIjoiQ05QSiJ9fSwiY3JlZGl0b3IiOnsicGVyc29uVHlwZSI6IlBFU1NPQV9OQVRVUkFMIiwiY3BmQ25waiI6IjU4NzY0Nzg5MDAwMTM3IiwibmFtZSI6Ik1hcmNvIEFudG9uaW8gZGUgQnJpdG8ifSwicGF5bWVudCI6eyJ0eXBlIjoiUElYIiwiZGF0ZSI6IjIwMjEtMDEtMDEiLCJjdXJyZW5jeSI6IkJSTCIsImFtb3VudCI6IjEwMDAwMC4xMiJ9LCJkZWJ0b3JBY2NvdW50Ijp7ImlzcGIiOiIxMjM0NTY3OCIsImlzc3VlciI6IjE3NzQiLCJudW1iZXIiOiIxMjM0NTY3ODkwIiwiYWNjb3VudFR5cGUiOiJDQUNDIn19LCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly9hcGkuYmFuY28uY29tLmJyL29wZW4tYmFua2luZy9hcGkvdjEvcmVzb3VyY2UifSwibWV0YSI6eyJ0b3RhbFJlY29yZHMiOjEsInRvdGFsUGFnZXMiOjEsInJlcXVlc3REYXRlVGltZSI6IjIwMjEtMDUtMjFUMDg6MzA6MDBaIn19.\n  08SM6dnS_-COzDmhlhJ-OfBAqyMpwPiaKCJPkggUKRgns7dFMvezsv2fWlX4tYkDw_Hc8NL-fsfw5eI13FoDTSQUPdKt8KRpPNZ5qXNsjyIIwtV13hmIepGSNsyaOlhX7JXVhxWceE5VfMcVp5no62tDqh1u84liOx8dOV5G31SlkBknPR5v-M-xNUFAo63WCFy6Zew-uuLbP3ruP4CSdY_h1BkOABJnraoa-yPhuByHg2zwbNY_ELYigf2FPyrFZsEH48hU_UZG1EOLt7cII9hzJxTYLtJX5SJiwH8kxegQtpbLpxZ3Se282Bc_OYyX1Fz4_lHjSDmuLwW3PzEbhQ\n```\n\n> Exemplo de resposta - JWS decodificada\n\n```json\n{\n  \"alg\": \"PS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"PWAi5ruQcHfzPzq2JFdpY7nAUh6LzTTQtDBUpOM37JQ\"\n}\n{\n  \"aud\": \"3449bf21-0b07-48e6-b6fc-13eb161a9901\",\n  \"iss\": \"ca1b98e1-97a2-43db-947f-8a08054c342e\",\n  \"jti\": \"a2fd393c-107a-4ad4-be22-3cfeeea90efe\",\n  \"iat\": \"1628257737\",\n  \"data\": {\n    \"consentId\": \"urn:bancoex:C1DD33123\",\n    \"creationDateTime\": \"2021-05-21T08:30:00Z\",\n    \"expirationDateTime\": \"2021-05-21T08:30:00Z\",\n    \"statusUpdateDateTime\": \"2021-05-21T08:30:00Z\",\n    \"status\": \"AWAITING_AUTHORISATION\",\n    \"loggedUser\": {\n      \"document\": {\n        \"identification\": \"11111111111\",\n        \"rel\": \"CPF\"\n      }\n    },\n    \"businessEntity\": {\n      \"document\": {\n        \"identification\": \"11111111111111\",\n        \"rel\": \"CNPJ\"\n      }\n    },\n    \"creditor\": {\n      \"personType\": \"PESSOA_NATURAL\",\n      \"cpfCnpj\": \"58764789000137\",\n      \"name\": \"Marco Antonio de Brito\"\n    },\n    \"payment\": {\n      \"type\": \"PIX\",\n      \"date\": \"2021-01-01\",\n      \"currency\": \"BRL\",\n      \"amount\": \"100000.12\"\n    },\n    \"debtorAccount\": {\n      \"ispb\": \"12345678\",\n      \"issuer\": \"1774\",\n      \"number\": \"1234567890\",\n      \"accountType\": \"CACC\"\n    }\n  },\n  \"links\": {\n    \"self\": \"https://api.banco.com.br/open-banking/payments/v1/consents\"\n  },\n  \"meta\": {\n    \"totalRecords\": 1,\n    \"totalPages\": 1,\n    \"requestDateTime\": \"2021-05-21T08:30:00Z\"\n  }\n}  \n\n* \"Assinatura omitida por questões de brevidade\"\n```\n\n\n**Em caso de erro**\n\n* Na validação da assinatura pelo Provedor do Recurso a API deve retornar mensagem de erro `HTTP` com status code `400` e a resposta deve incluir na propriedade code do objeto de resposta de erro especificado na API (*ResponseError*) a indicação da falha com o conteúdo `BAD_SIGNATURE`.  \n\n* Erros na validação da mensagem recebida pela aplicação cliente (p. ex. iniciador de pagamento) devem ser registrados e o `Provedor do Recurso` (p. ex. instituição detentora de conta) deve ser notificado.\n"
  version: 1.0.1-rc1.0
tags:
  - name: API - Pagamentos
    description: |
      |Versão|
      |:-----|
      |1.0.1-rc1.0|

      #### Visão Geral

      A API tem como objetivo coletar o consentimento e realizar a iniciação de pagamento entre bancos e instituições financeiras e acessível também à estabelecimentos comerciais participantes do Open Banking Brasil.

      Os recursos estão disponíveis para pagadores que possuem vínculo com uma instituição detentora de conta participante do Open Banking, independentemente de serem pessoa física ou jurídica.

      #### Especificação em OAS 3.0

      <a href="swagger/swagger_payments_apis.yaml" target="_blank">Download da Especificação (OAS 3.0)</a>  
paths:
  /payments/v1/consents:
    post:
      tags:
        - API - Pagamentos
      summary: Criar consentimento para iniciação de pagamento.
      operationId: paymentsPostConsents
      description: |
        Método para a criação do consentimento para iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/consents`

        <a href='dictionary/paymentsPostConsents_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentConsent'
        description: Payload para criação do consentimento para iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201PaymentsConsentsConsentCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntityConsents'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
  '/payments/v1/consents/{consentId}':
    get:
      tags:
        - API - Pagamentos
      summary: Consultar consentimento para iniciação de pagamento.
      operationId: paymentsGetConsentsConsentId
      description: |
        Método para consultar o consentimento para iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/consents`

        <a href='dictionary/paymentsGetConsentsConsentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).
      parameters:
        - $ref: '#/components/parameters/consentId'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentsConsentsConsentIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
  /payments/v1/pix/payments:
    post:
      tags:
        - API - Pagamentos
      summary: Pix - Criar iniciação de pagamento.
      operationId: paymentsPostPixPayments
      description: |
        Método para a criação de uma iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/pix/payments`

        <a href='dictionary/paymentsPostPixPayments_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePixPayment'
        description: Payload para criação da iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201PaymentsInitiationPixPaymentCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayments'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
  '/payments/v1/pix/payments/{paymentId}':
    get:
      tags:
        - API - Pagamentos
      summary: Pix - Consultar iniciação de pagamento.
      operationId: paymentsGetPixPaymentsPaymentId
      description: |
        Método para consultar uma iniciação de pagamento.

        ### Dicionário de dados

        Campos de resposta do endpoint de `/pix/payments`.  

        <a href='dictionary/paymentsGetPixPaymentsPaymentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

        Consulte a seção **Convenções de payload** para obter mais informações sobre [Atributos Obrigatórios / Opcionais](#convencoes-de-propriedade-dos-atributos).
      parameters:
        - $ref: '#/components/parameters/paymentId'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/xCustomerUserAgent'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentsInitiationPixPaymentIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OpenId:
            - openid
          OAuth2Security:
            - 'consent:consentId'
            - payments
components:
  schemas:
    422ResponseErrorCreateConsent:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                $ref: '#/components/schemas/EnumErrorsCreateConsent'
              title:
                type: string
                maxLength: 255
                pattern: \w*\W*
                example: Forma de pagamento inválida.
                description: |
                  Título específico do erro reportado, de acordo com o código enviado:  
                  • FORMA_PGTO_INVALIDA: Forma de pagamento inválida.  
                  • DATA_PGTO_INVALIDA: Data de pagamento inválida. 
                  • DETALHE_PGTO_INVALIDO: Detalhe do pagamento inválido.
                  • NAO_INFORMADO: Não informado.    
              detail:
                type: string
                maxLength: 2048
                pattern: \w*\W*
                example: Meio de pagamento inválido.
                description: |
                  Descrição específica do erro de acordo com o código reportado:  
                  • FORMA_PGTO_INVALIDA – Meio de pagamento inválido.  
                  • DATA_PGTO_INVALIDA – Data de pagamento inválida no contexto, por exemplo, data no passado. Para pagamentos únicos deve ser informada a data atual, do dia corrente.  
                  • DETALHE_PGTO_INVALIDO: O campo [nome_campo] não atende os requisitos de preenchimento.  
                  • NAO_INFORMADO – Não reportado/identificado pela instituição detentora de conta.  
            additionalProperties: false
        meta:
          $ref: '#/components/schemas/Meta'
      additionalProperties: false
    422ResponseErrorCreatePixPayment:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 9
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                $ref: '#/components/schemas/EnumErrorsCreatePayment'
              title:
                type: string
                maxLength: 255
                pattern: \w*\W*
                example: Saldo insuficiente.
                description: |
                  Título específico do erro reportado, de acordo com o código enviado:  
                  • SALDO_INSUFICIENTE: Saldo insuficiente.  
                  • BENEFICIARIO_INCOMPATIVEL: Beneficiário incompatível.  
                  • VALOR_INCOMPATIVEL: Valor da transação incompatível.  
                  • VALOR_ACIMA_LIMITE: Acima do limite estabelecido.  
                  • VALOR_INVALIDO: Valor inválido.  
                  • COBRANCA_INVALIDA: Cobrança inválida.  
                  • CONSENTIMENTO_INVALIDO: Consentimento inválido.  
                  • JANELA_OPER_INVALIDA: Janela de operação inválida.  
                  • NAO_INFORMADO: Não informado.  
              detail:
                type: string
                maxLength: 2048
                pattern: \w*\W*
                example: A conta selecionada não possui saldo suficiente para realizar o pagamento.
                description: |
                  Descrição específica do erro de acordo com o código reportado:  
                  • SALDO_INSUFICIENTE: A conta selecionada não possui saldo suficiente para realizar o pagamento.  
                  • BENEFICIARIO_INCOMPATIVEL: O beneficiário informado no consentimento não é o mesmo do esperado pelo DICT.  
                  • VALOR_INCOMPATIVEL: O valor informado no consentimento não é o mesmo valor do informado no payload de pagamento.  
                  • VALOR_ACIMA_LIMITE: O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente.  
                  • VALOR_INVALIDO: O valor enviado não é válido para o QR Code informado.  
                  • COBRANCA_INVALIDA: Validação de expiração, validação de vencimento ou Status Válido.  
                  • CONSENTIMENTO_INVALIDO: Consentimento inválido (status diferente de "AUTHORISED" ou está expirado).  
                  • JANELA_OPER_INVALIDA: Requisição está fora da janela de funcionamento.  
                  • NAO_INFORMADO: Não reportado/identificado pela instituição detentora de conta.  
            additionalProperties: false
        meta:
          $ref: '#/components/schemas/Meta'
      additionalProperties: false
    Account:
      type: object
      description: |
        Objeto que contém a identificação de uma conta. 
      required:
        - ispb
        - number
        - checkDigit
        - accountType
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          maxLength: 4
          pattern: '^\d{4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito.  
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito,  
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).  
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA), SVGS (CONTA_POUPANCA) e SLRY (CONTA_SALARIO).
        number:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^\d{8,20}$'
          example: '1234567890'
          description: Número da conta sem o dígito.
        checkDigit:
          type: string
          pattern: \w*\W*
          minLength: 1
          maxLength: 1
          example: '4'
          description: Dígito da conta.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
      additionalProperties: false
    BusinessEntity:
      type: object
      description: 'Usuário (pessoa jurídica) que encontra-se logado na instituição Iniciadora de Pagamento. [Restrição] Preenchimento obrigatório se usuário logado na instituição Iniciadora de Pagamento for um CNPJ (pessoa jurídica).'
      additionalProperties: false
      required:
        - document
      properties:
        document:
          type: object
          additionalProperties: false
          required:
            - identification
            - rel
          properties:
            identification:
              type: string
              maxLength: 14
              description: Número do documento de identificação oficial do titular pessoa jurídica.
              example: '11111111111111'
              pattern: '^\d{14}$'
            rel:
              type: string
              maxLength: 4
              description: Tipo do documento de identificação oficial do titular pessoa jurídica.
              example: CNPJ
              pattern: '^[A-Z]{4}$'
    CreatePaymentConsent:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          description: Objeto contendo as informações de consentimento para a iniciação de pagamento individual.
          required:
            - loggedUser
            - creditor
            - payment
          properties:
            loggedUser:
              $ref: '#/components/schemas/LoggedUser'
            businessEntity:
              $ref: '#/components/schemas/BusinessEntity'
            creditor:
              $ref: '#/components/schemas/Identification'
            payment:
              $ref: '#/components/schemas/PaymentConsent'
            debtorAccount:
              $ref: '#/components/schemas/DebtorAccount'
          additionalProperties: false
      additionalProperties: false
    CreatePixPayment:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CreatePixPaymentData'
      additionalProperties: false
    CreatePixPaymentData:
      type: object
      description: Objeto contendo dados do pagamento e do recebedor (creditor).
      required:
        - localInstrument
        - payment
        - creditorAccount
        - cnpjInitiator
      properties:
        localInstrument:
          $ref: '#/components/schemas/EnumLocalInstrument'
        payment:
          $ref: '#/components/schemas/PaymentPix'
        creditorAccount:
          $ref: '#/components/schemas/CreditorAccount'
        remittanceInformation:
          type: string
          maxLength: 140
          pattern: '[\w\W\s]*'
          example: Pagamento da nota XPTO035-002.
          description: |
            Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
        qrCode:
          type: string
          maxLength: 512
          pattern: '[\w\W\s]*'
          example: |
            00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  
            BR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  
            530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  
            CD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76
          description: |
            Obs: Campo reservado para uso futuro.  
            Sequência de caracteres que corresponde ao QR Code disponibilizado para o pagador.  
            É a sequência de caracteres que seria lida pelo leitor de QR Code, e deve propiciar o retorno dos dados do pagador após consulta na DICT.  
            Essa funcionalidade é possível tanto para QR Code estático quanto para QR Code dinâmico.  
            No arranjo do Pix esta é a mesma sequência gerada e/ou lida pela funcionalidade Pix Copia e Cola.  
            Este campo deverá ser no formato UTF-8.  
            [Restrição] Preenchimento obrigatório para pagamentos por QR Code, observado o tamanho máximo de 512 bytes.
        proxy:
          type: string
          maxLength: 77
          pattern: '[\w\W\s]*'
          example: '12345678901'
          description: |
            Chave cadastrada no DICT pertencente ao recebedor. Os tipos de chaves podem ser: telefone, e-mail, cpf/cnpj ou chave aleatória.  
            No caso de telefone celular deve ser informado no padrão E.1641.  
            Para e-mail deve ter o formato xxxxxxxx@xxxxxxx.xxx(.xx) e no máximo 77 caracteres.  
            No caso de CPF deverá ser informado com 11 números, sem pontos ou traços.  
            Para o caso de CNPJ deverá ser informado com 14 números, sem pontos ou traços.  
            No caso de chave aleatória deve ser informado o UUID gerado pelo DICT, conforme formato especificado na RFC41223.  
            Se informado, a detentora da conta deve validar o proxy no DICT quando localInstrument for igual a DICT, QRDN (uso futuro) ou QRES (uso futuro) e validar o campo creditorAccount.
            Esta validação é opcional caso o localInstrument for igual a INIC.  
            [Restrição] Se localInstrument for igual a MANU, o campo proxy não deve ser preenchido. Se localInstrument for igual INIC, DICT, QRDN (uso futuro) ou QRES (uso futuro), o campo proxy deve ser sempre preenchido com a chave Pix.  
        cnpjInitiator:
          type: string
          pattern: '^\d{14}$'
          maxLength: 14
          example: '50685362000135'
          description: CNPJ do Iniciador de Pagamento devidamente habilitado para a prestação de Serviço de Iniciação no Pix.
        transactionIdentification:
          type: string
          pattern: '^[a-zA-Z0-9][a-zA-Z0-9]{0,24}$'
          maxLength: 25
          example: E00038166201907261559y6j6
          description: |
            Trata-se de um identificador de transação que deve ser retransmitido intacto pelo PSP do pagador ao gerar a ordem de pagamento. Essa informação permitirá ao recebedor identificar e correlacionar a transferência, quando recebida, com a apresentação das instruções ao pagador.
            Os caracteres permitidos no contexto do Pix para o campo txid (EMV 62-05) são:    
            - Letras minúsculas, de ‘a’ a ‘z’ 
            - Letras maiúsculas, de ‘A’ a ‘z’   
            - Dígitos decimais, de ‘0’ a ‘9’ 
                
            [Restrição] Se localInstrument for igual a INIC, o campo transactionIdentification deve ser preenchido obrigatoriamente.
            Se localInstrument for igual a MANU ou DICT, o campo transactionIdentification não deve ser preenchido.
            A detentora de conta deve validar se a condicionalidade do campo foi atendida pela iniciadora de pagamento.
          additionalProperties: false
    CreditorAccount:
      type: object
      description: |
        Objeto que contém a identificação da conta de destino do beneficiário/recebedor.  
      required:
        - ispb
        - number
        - accountType
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          maxLength: 4
          pattern: '^\d{4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito.  
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito,  
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).  
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA), SVGS (CONTA_POUPANCA) e SLRY (CONTA_SALARIO).
        number:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^\d{3,20}$'
          example: '1234567890'
          description: |
            Deve ser preenchido com o número da conta do usuário recebedor, com dígito verificador (se este existir),  
            se houver valor alfanumérico, este deve ser convertido para 0.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
      additionalProperties: false
    DebtorAccount:
      type: object
      description: |
        Objeto que contém a identificação da conta de origem do pagador.  
        As informações quanto à conta de origem do pagador poderão ser trazidas no consentimento para a detentora, caso a iniciadora tenha coletado essas informações do cliente. Do contrário, será coletada na detentora e trazida para a iniciadora como resposta à criação do pagamento.
      required:
        - ispb
        - number
        - accountType
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          maxLength: 4
          pattern: '^\d{4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito.  
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito,  
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).  
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA), SVGS (CONTA_POUPANCA) e SLRY (CONTA_SALARIO).
        number:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^\d{3,20}$'
          example: '1234567890'
          description: |
            Deve ser preenchido com o número da conta transacional do usuário pagador, com dígito verificador (se este existir),  
            se houver valor alfanumérico, este deve ser convertido para 0.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
      additionalProperties: false
    Details:
      type: object
      description: |
        Objeto contendo os detalhes do pagamento.  
      required:
        - localInstrument
        - creditorAccount
      properties:
        localInstrument:
          $ref: '#/components/schemas/EnumLocalInstrument'
        qrCode:
          type: string
          maxLength: 512
          pattern: '[\w\W\s]*'
          example: |
            00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  
            BR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  
            530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  
            CD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76
          description: |
            Obs: Campo reservado para uso futuro.  
            Sequência de caracteres que corresponde ao QR Code disponibilizado para o pagador.  
            É a sequência de caracteres que seria lida pelo leitor de QR Code, e deve propiciar o retorno dos dados do pagador após consulta na DICT.  
            Essa funcionalidade é possível tanto para QR Code estático quanto para QR Code dinâmico.  
            No arranjo do Pix esta é a mesma sequência gerada e/ou lida pela funcionalidade Pix Copia e Cola.  
            Este campo deverá ser no formato UTF-8.  
            [Restrição] Preenchimento obrigatório para pagamentos por QR Code, observado o tamanho máximo de 512 bytes.
        proxy:
          type: string
          maxLength: 77
          pattern: '[\w\W\s]*'
          example: '12345678901'
          description: |
            Chave cadastrada no DICT pertencente ao recebedor. Os tipos de chaves podem ser: telefone, e-mail, cpf/cnpj ou chave aleatória.  
            No caso de telefone celular deve ser informado no padrão E.1641.  
            Para e-mail deve ter o formato xxxxxxxx@xxxxxxx.xxx(.xx) e no máximo 77 caracteres.  
            No caso de CPF deverá ser informado com 11 números, sem pontos ou traços.  
            Para o caso de CNPJ deverá ser informado com 14 números, sem pontos ou traços.  
            No caso de chave aleatória deve ser informado o UUID gerado pelo DICT, conforme formato especificado na RFC41223.  
            Se informado, a detentora da conta deve validar o proxy no DICT quando localInstrument for igual a DICT, QRDN (uso futuro) ou QRES (uso futuro) e validar o campo creditorAccount.
            Esta validação é opcional caso o localInstrument for igual a INIC.  
            [Restrição]  
            Se localInstrument for igual a MANU, o campo proxy não deve ser preenchido.  
            Se localInstrument for igual INIC, DICT, QRDN (uso futuro) ou QRES (uso futuro), o campo proxy deve ser sempre preenchido com a chave Pix.
        creditorAccount:
          $ref: '#/components/schemas/CreditorAccount'
      additionalProperties: false
    EndToEndId:
      type: string
      minLength: 32
      maxLength: 32
      pattern: '^([E])([0-9]{8})([0-9]{4})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(2[0-3]|[01][0-9])([0-5][0-9])([a-zA-Z0-9]{11})$'
      example: E9040088820210128000800123873170
      description: |
        Deve ser preenchido no formato padrão ExxxxxxxxyyyyMMddHHmmkkkkkkkkkkk (32 caracteres; “case sensitive”, isso é, diferencia letras maiúsculas e minúsculas), sendo:
        • “E” – fixo (1 caractere);  
        • xxxxxxxx – identificação do agente que gerou o ´EndToEndId´, podendo ser: o ISPB do participante direto ou o ISPB do participante indireto (8 caracteres numéricos [0-9]);  
        • yyyyMMddHHmm – data, hora e minuto (12 caracteres), seguindo o horário UTC, da submissão da ordem de pagamento, caso a liquidação seja prioritária, ou prevista para o envio da ordem ao sistema de liquidação, caso seja realizado um agendamento. Para ordens prioritárias e não prioritárias, aceita-se o preenchimento, pelo agente que gerou o ´EndToEndId´, com uma tolerância máxima de 12 horas, para o futuro e para o passado, em relação ao horário efetivo de processamento da ordem pelo SPI;  
        • kkkkkkkkkkk – sequencial criado pelo agente que gerou o ´EndToEndId´ (11 caracteres alfanuméricos [a-z/A-Z/0-9]). Deve ser único dentro de cada “yyyyMMddHHmm”.  
        Admite-se que o ´EndToEndId´ seja gerado pelo participante direto, pelo participante indireto ou pelo iniciador de pagamento.  
        Ele deve ser único, não podendo ser repetido em qualquer outra operação enviada ao SPI.  
        [Restrição] O ´EndToEndId´ deve ser informado obrigatoriamente caso o status do pagamento seja ACCEPTED_SETTLEMENT_COMPLETED.
    EnumAccountPaymentsType:
      type: string
      maxLength: 4
      enum:
        - CACC
        - SLRY
        - SVGS
        - TRAN
      example: CACC
      description: |
        Tipos de contas usadas para pagamento via Pix.  
        Modalidades tradicionais previstas pela Resolução 4.753, não contemplando contas vinculadas,  
        conta de domiciliados no exterior, contas em moedas estrangeiras e conta correspondente moeda eletrônica.  
        Segue descrição de cada valor do ENUM para o escopo do Pix.  
        CACC - Current - Conta Corrente.  
        SLRY - Salary - Conta-Salário.  
        SVGS - Savings - Conta de Poupança.  
        TRAN - TransactingAccount - Conta de Pagamento pré-paga.
    EnumAuthorisationStatusType:
      type: string
      maxLength: 22
      enum:
        - AWAITING_AUTHORISATION
        - AUTHORISED
        - REJECTED
        - CONSUMED
      example: AWAITING_AUTHORISATION
      description: |
        Retorna o estado do consentimento, o qual no momento de sua criação será AWAITING_AUTHORISATION.
        Este estado será alterado depois da autorização do consentimento na detentora da conta do pagador (Debtor) para AUTHORISED ou REJECTED. 
        O consentimento fica no estado CONSUMED após ocorrer a iniciação do pagamento referente ao consentimento.  
        Em caso de consentimento expirado a detentora deverá retornar o status REJECTED.  
        Estados possíveis:  
        AWAITING_AUTHORISATION - Aguardando autorização  
        AUTHORISED - Autorizado   
        REJECTED - Rejeitado  
        CONSUMED - Consumido 
    EnumErrorsCreateConsent:
      type: string
      maxLength: 21
      enum:
        - FORMA_PGTO_INVALIDA
        - DATA_PGTO_INVALIDA
        - DETALHE_PGTO_INVALIDO
        - NAO_INFORMADO
      example: FORMA_PGTO_INVALIDA
      description: |
        Códigos de erros previstos na criação de consentimento para a iniciação de pagamentos:  
        • FORMA_PGTO_INVALIDA: Forma de pagamento inválida.  
        • DATA_PGTO_INVALIDA: Data de pagamento inválida.  
        • DETALHE_PGTO_INVALIDO: Detalhe do pagamento inválido.  
        • NAO_INFORMADO: Não informado.   
    EnumErrorsCreatePayment:
      type: string
      maxLength: 25
      enum:
        - SALDO_INSUFICIENTE
        - BENEFICIARIO_INCOMPATIVEL
        - VALOR_INCOMPATIVEL
        - VALOR_ACIMA_LIMITE
        - VALOR_INVALIDO
        - COBRANCA_INVALIDA
        - CONSENTIMENTO_INVALIDO
        - JANELA_OPER_INVALIDA
        - NAO_INFORMADO
      example: SALDO_INSUFICIENTE
      description: |
        Códigos de erros previstos na criação da iniciação de pagamento:  
        • SALDO_INSUFICIENTE – Esta conta não possui saldo suficiente para realizar o pagamento.  
        • BENEFICIARIO_INCOMPATIVEL – O beneficiário informado no consentimento não é o mesmo do esperado pelo DICT.  
        • VALOR_INCOMPATIVEL – O valor informado no consentimento não é o mesmo valor do informado no payload de pagamento.  
        • VALOR_ACIMA_LIMITE – O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente.  
        • VALOR_INVALIDO – O valor enviado não é válido para o QR Code informado.  
        • COBRANCA_INVALIDA – Validação de expiração, validação de vencimento, Status Válido.  
        • CONSENTIMENTO_INVALIDO – Consentimento inválido (status não é "authorised" ou está expirado).  
        • JANELA_OPER_INVALIDA – Requisição está fora da janela de funcionamento.  
        • NAO_INFORMADO – Não informada pela detentora de conta.  
    EnumLocalInstrument:
      type: string
      maxLength: 4
      enum:
        - MANU
        - DICT
        - QRDN
        - QRES
        - INIC
      example: DICT
      description: |
        Especifica a forma de iniciação do pagamento:  
        - MANU - Inserção manual de dados da conta transacional  
        - DICT - Inserção manual de chave Pix  
        - QRDN - QR code dinâmico (*Domínio reservado para uso futuro*)  
        - QRES - QR code estático (*Domínio reservado para uso futuro*)  
        - INIC - Indica que o recebedor (creditor) contratou o Iniciador de Pagamentos especificamente para realizar iniciações de pagamento em que o beneficiário é previamente conhecido.  
    EnumPaymentPersonType:
      type: string
      maxLength: 15
      enum:
        - PESSOA_NATURAL
        - PESSOA_JURIDICA
      description: |
        Titular, pessoa natural ou juridica a quem se referem os dados de recebedor (creditor).
    EnumPaymentStatusType:
      type: string
      maxLength: 45
      enum:
        - PDNG
        - PART
        - ACSP
        - ACSC
        - ACCC
        - RJCT
      example: PDNG
      description: |
        Estado atual da iniciação de pagamento. O estado evolui na seguinte ordem:  
        1. PDNG (PENDING) - Iniciação de pagamento ou transação de pagamento está pendente. Checagens adicionais em realização.  
        2. PART (PARTIALLY ACCEPTED) - Aguardando autorização múltipla alçada.  
        3. ACSP (ACCEPTED_SETTLEMENT_IN_PROCESS) - Iniciação de pagamento aceita e processamento do pagamento foi iniciado.  
        4. ACSC (ACCEPTED_SETTLEMENT_COMPLETED_DEBITOR_ACCOUNT) - Débito realizado na conta do pagador.  
        5. ACCC (ACCEPTED_SETTLEMENT_COMPLETED) - Crédito realizado na instituição de destino.  
        Em caso insucesso:  
        RJCT (REJECTED) - Instrução de pagamento rejeitada.
    EnumPaymentType:
      type: string
      maxLength: 3
      enum:
        - PIX
      example: PIX
      description: |
        Este campo define o tipo de pagamento que será iniciado após a autorização do consentimento.
    EnumRejectionReasonType:
      type: string
      maxLength: 50
      enum:
        - ABORTED_SETTLEMENT_TIMEOUT
        - ERROR_CREDITOR_AGENT
        - TIMEOUT_DEBTOR_AGENT
        - INVALID_CREDITOR_ACCOUNT_NUMBER
        - BLOCKED_ACCOUNT
        - CLOSED_CREDITOR_ACCOUNT_NUMBER
        - INVALID_CREDITOR_ACCOUNTTYPE
        - TRANSACTION_NOT_SUPPORTED
        - NOT_ALLOWED_BOOK_TRANSFER
        - FORBIDDEN_RETURN_PAYMENT
        - INCORRECT_AGENT
        - ZERO_AMOUNT
        - NOT_ALLOWED_AMOUNT
        - INSUFFICIENT_FUNDS
        - WRONG_AMOUNT
        - INVALID_AMOUNT
        - INVALID_NUMBER_OF_TRANSACTIONS
        - INCONSISTENT_WITH_END_CUSTOMER
        - INVALID_IDENTIFICATION_CODE
        - INVALID_CREDITOR_IDENTIFICATION_CODE
        - CREDITOR_IDENTIFIER_INCORRECT
        - ELEMENT_CONTENT_FORMALLY_INCORRECT
        - ORDER_REJECTED
        - NOT_ALLOWED_PAYMENT
        - NOT_ALLOWED_ACCOUNT
        - USER_NOT_YET_ACTIVATED
        - INVALID_CREATION_DATE
        - INVALID_CUT_OFF_DATE
        - SETTLEMENT_FAILED
        - INVALID_PURPOSE
        - INVALID_END_TO_END_ID
        - INVALID_DEBTOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER
        - INVALID_CREDITOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER
        - REGULATORY_REASON
        - SPECIFIC_SERVICE_OFFERED_BY_CREDITOR_AGENT
        - INVALID_BILL
        - OPERATION_WINDOW
        - INCOMPATIBLE_DATE
        - MISMATCH_AMOUNT
        - OVER_LIMIT
        - INVALID_CONSENT
        - DENIED_MULTIPLE_AUTHORISATIONS
        - EXPIRED_MULTIPLE_AUTHORISATIONS
        - EXPIRED_BILL
      example: USER_NOT_YET_ACTIVATED
      description: |
        Motivo da rejeição do pagamento. Informações complementares sobre o motivo do status.  
        ABORTED_SETTLEMENT_TIMEOUT - Liquidação da transação interrompida devido a timeout no SPI (AB03).
        ERROR_CREDITOR_AGENT - Transação interrompida devido a erro no participante do usuário recebedor (AB09).
        TIMEOUT_DEBTOR_AGENT - Timeout do participante emissor da ordem de pagamento (AB11).
        INVALID_CREDITOR_ACCOUNT_NUMBER - Número da conta transacional do usuário recebedor inexistente ou inválido (AC03).
        BLOCKED_ACCOUNT - Conta transacional do usuário recebedor encontra-se bloqueada (AC06).
        CLOSED_CREDITOR_ACCOUNT_NUMBER - Número da conta transacional do usuário recebedor encerrada (AC07).
        INVALID_CREDITOR_ACCOUNTTYPE - Tipo incorreto para a conta transacional do usuário recebedor (AC14).
        TRANSACTION_NOT_SUPPORTED - Tipo de transação não é suportado/autorizado na conta transacional do usuário recebedor (AG03). Exemplo: transferência para conta salário.
        NOT_ALLOWED_BOOK_TRANSFER - Não é permitida ordem de pagamento/devolução no SPI cujos recursos sejam transferidos de uma conta transacional para outra em uma mesma instituição participante ou entre participantes que utilizem o serviço de liquidação de um mesmo participante liquidante no SPI (booktransfer) (AG12).
        FORBIDDEN_RETURN_PAYMENT - Não é permitido devolver a devolução de um pagamento instantâneo (AG13).
        INCORRECT_AGENT - Participante direto não é liquidante do participante do usuário pagador / participante do usuário recebedor (AGNT).
        ZERO_AMOUNT - Ordem de pagamento instantâneo com valor zero (AM01).
        NOT_ALLOWED_AMOUNT - Ordem de pagamento/devolução em valor que faz superar o limite permitido para o tipo de conta transacional creditada (AM02).
        INSUFFICIENT_FUNDS - Saldo insuficiente na conta PI do participante do usuário pagador (AM04).
        WRONG_AMOUNT - Devolução de pagamento em valor que faz superar o valor da ordem de pagamento instantâneo correspondente (AM09).
        INVALID_AMOUNT - Divergência entre a somatória dos valores do bloco ‘valorDoDinheiroOuCompra’ e o campo ‘valor’ (AM12).
        INVALID_NUMBER_OF_TRANSACTIONS - Quantidade de transações inválida (AM18).
        INCONSISTENT_WITH_END_CUSTOMER - CPF/CNPJ do usuário recebedor não é consistente com o titular da conta transacional especificada (BE01).
        INVALID_IDENTIFICATION_CODE - Código de situação de pagamento ou de erro inválido (BE15).
        INVALID_CREDITOR_IDENTIFICATION_CODE - QR Code rejeitado pelo participante do usuário recebedor (BE17).
        CREDITOR_IDENTIFIER_INCORRECT - CPF/CNPJ do usuário recebedor incorreto (CH11).
        ELEMENT_CONTENT_FORMALLY_INCORRECT - Elemento da mensagem incorreto (CH16).
        ORDER_REJECTED - Ordem rejeitada pelo participante do usuário recebedor (DS04).
        NOT_ALLOWED_PAYMENT - Participante que assinou a mensagem não é autorizado a realizar a operação na conta PI debitada. No caso em que o participante que assinou a mensagem não é o titular da conta PI debitada nem é o liquidante no SPI do participante do usuário pagador (DS0G).
        NOT_ALLOWED_ACCOUNT - ISPB do participante que submeteu a resposta à ordem de pagamento/devolução diferente do ISPB do participante creditado pela ordem (DS0H).
        USER_NOT_YET_ACTIVATED - Participante não se encontra cadastrado ou ainda não iniciou a operação no SPI (DS27).
        INVALID_CREATION_DATE - Data e Hora do envio da mensagem inválida (DT02).
        INVALID_CUT_OFF_DATE - Transação extrapola o prazo máximo para devolução de pagamento instantâneo regulamentado pelo Arranjo PIX (DT05).
        SETTLEMENT_FAILED - Erro no processamento do pagamento instantâneo (ED05).
        INVALID_PURPOSE - Inconsistência entre a finalidade da transação e o preenchimento do bloco elementos Structured (FF07).
        INVALID_END_TO_END_ID - Identificador da operação mal formatado (FF08).
        INVALID_DEBTOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER - ISPB do participante do usuário pagador inválido ou inexistente (RC09).
        INVALID_CREDITOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER - ISPB do participante do usuário recebedor inválido ou inexistente (RC10).
        REGULATORY_REASON - Ordem de pagamento em que o usuário pagador é sancionado por resolução do Conselho de Segurança das Nações Unidas (CSNU). Nos casos em que o usuário recebedor for o sancionado, a ordem de pagamento não deve ser rejeitada (RR4).
        SPECIFIC_SERVICE_OFFERED_BY_CREDITOR_AGENT - A transação original não está relacionada ao serviço de Saque Pix (SL02).
        INVALID_BILL - Validação de expiração, validação de vencimento, Status Válido (INDT).  
        OPERATION_WINDOW - Requisição está fora da janela de funcionamento (IDEA).  
        INCOMPATIBLE_DATE - Data do pagamento divergente da data consentida ou divergente da data atual do QR Code (TERM).  
        MISMATCH_AMOUNT - O valor informado no consentimento não é o mesmo valor do informado no payload de pagamento (OB01).  
        OVER_LIMIT - O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente (OB02).   
        INVALID_CONSENT - Consentimento inválido (status não é "authorised" ou está expirado) (OB03).  
        DENIED_MULTIPLE_AUTHORISATIONS - Um (ou mais) aprovadores na detentora recusaram a operação (OB04).  
        EXPIRED_MULTIPLE_AUTHORISATIONS - Um (ou mais) aprovadores na detentora não tomaram ação para aprovar a operação (OB05).  
        EXPIRED_BILL - O QR Code não é mais válido (OB06).  
        [Restrição] Esse motivo deverá ser enviado quando o campo /data/status for igual a RJCT (REJECTED).  
    Identification:
      type: object
      description: Objeto contendo os dados do recebedor (creditor).
      required:
        - personType
        - cpfCnpj
        - name
      properties:
        personType:
          $ref: '#/components/schemas/EnumPaymentPersonType'
        cpfCnpj:
          type: string
          minLength: 11
          maxLength: 14
          pattern: '^\d{11}$|^\d{14}$'
          example: '58764789000137'
          description: |
            Identificação da pessoa envolvida na transação.  
            Preencher com o CPF ou CNPJ, de acordo com o valor escolhido no campo type.  
            O CPF será utilizado com 11 números e deverá ser informado sem pontos ou traços.  
            O CNPJ será utilizado com 14 números e deverá ser informado sem pontos ou traços.
        name:
          type: string
          maxLength: 140
          pattern: '[\w\W\s]*'
          example: Marco Antonio de Brito
          description: |
            Em caso de pessoa natural deve ser informado o nome completo do titular da conta do recebedor.  
            Em caso de pessoa jurídica deve ser informada a razão social ou o nome fantasia da conta do recebedor.
      additionalProperties: false
    Links:
      type: object
      description: Referências para outros recusos da API requisitada.
      required:
        - self
      properties:
        self:
          type: string
          format: uri
          maxLength: 2000
          description: URI completo que gerou a resposta atual.
          example: 'https://api.banco.com.br/open-banking/api/v1/resource'
          pattern: '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
        first:
          type: string
          format: uri
          maxLength: 2000
          description: URI da primeira página que originou essa lista de resultados. Restrição - Obrigatório quando não for a primeira página da resposta
          example: 'https://api.banco.com.br/open-banking/api/v1/resource'
          pattern: '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
        prev:
          type: string
          format: uri
          maxLength: 2000
          description: "URI da página anterior dessa lista de resultados. Restrição - \tObrigatório quando não for a primeira página da resposta"
          example: 'https://api.banco.com.br/open-banking/api/v1/resource'
          pattern: '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
        next:
          type: string
          format: uri
          maxLength: 2000
          description: URI da próxima página dessa lista de resultados. Restrição - Obrigatório quando não for a última página da resposta
          example: 'https://api.banco.com.br/open-banking/api/v1/resource'
          pattern: '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
        last:
          type: string
          format: uri
          maxLength: 2000
          description: URI da última página dessa lista de resultados. Restrição - Obrigatório quando não for a última página da resposta
          example: 'https://api.banco.com.br/open-banking/api/v1/resource'
          pattern: '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
      additionalProperties: false
    LoggedUser:
      type: object
      description: Usuário (pessoa natural) que encontra-se logado na instituição Iniciadora de Pagamento.
      additionalProperties: false
      required:
        - document
      properties:
        document:
          type: object
          additionalProperties: false
          required:
            - identification
            - rel
          properties:
            identification:
              type: string
              maxLength: 11
              description: Número do documento de identificação oficial do usuário.
              example: '11111111111'
              pattern: '^\d{11}$'
            rel:
              type: string
              maxLength: 3
              description: Tipo do documento de identificação oficial do usuário.
              example: CPF
              pattern: '^[A-Z]{3}$'
    Meta:
      type: object
      description: Meta informações referente a API requisitada.
      required:
        - totalRecords
        - totalPages
        - requestDateTime
      properties:
        totalRecords:
          type: integer
          format: int32
          description: Número total de registros no resultado
          example: 1
        totalPages:
          type: integer
          format: int32
          description: Número total de páginas no resultado
          example: 1
        requestDateTime:
          description: 'Data e hora da consulta, conforme especificação RFC-3339, formato UTC.'
          type: string
          maxLength: 20
          format: date-time
          example: '2021-05-21T08:30:00Z'
      additionalProperties: false
    PaymentConsent:
      type: object
      description: Objeto contendo dados de pagamento para consentimento.
      required:
        - type
        - date
        - currency
        - amount
        - details
      properties:
        type:
          $ref: '#/components/schemas/EnumPaymentType'
        date:
          type: string
          format: date
          maxLength: 10
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
          example: '2021-01-01'
          description: 'Data do pagamento, conforme especificação RFC-3339.'
        currency:
          type: string
          maxLength: 3
          pattern: '^([A-Z]{3})$'
          example: BRL
          description: |
            Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'. 
            Todos os valores monetários informados estão representados com a moeda vigente do Brasil.
        amount:
          type: string
          minLength: 4
          maxLength: 19
          pattern: '^((\d{1,16}\.\d{2}))$'
          example: '100000.12'
          description: |
            Valor da transação com 2 casas decimais.
        details:
          $ref: '#/components/schemas/Details'
      additionalProperties: false
    PaymentPix:
      type: object
      description: Objeto contendo dados do pagameto como moeda e valor.
      required:
        - amount
        - currency
      properties:
        amount:
          type: string
          minLength: 4
          maxLength: 19
          pattern: '^((\d{1,16}\.\d{2}))$'
          example: '100000.12'
          description: |
            Valor da transação com 2 casas decimais.
        currency:
          type: string
          maxLength: 3
          pattern: '^([A-Z]{3})$'
          example: BRL
          description: |
            Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'.  
            Todos os valores monetários informados estão representados com a moeda vigente do Brasil.
      additionalProperties: false
    ResponseError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 13
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                description: Código de erro específico do endpoint
                type: string
                pattern: '[\w\W\s]*'
                maxLength: 255
              title:
                description: Título legível por humanos deste erro específico
                type: string
                pattern: '[\w\W\s]*'
                maxLength: 255
              detail:
                description: Descrição legível por humanos deste erro específico
                type: string
                pattern: '[\w\W\s]*'
                maxLength: 2048
            additionalProperties: false
        meta:
          $ref: '#/components/schemas/Meta'
      additionalProperties: false
    ResponsePaymentConsent:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          type: object
          description: Objeto contendo as informações de resposta do consentimento para a iniciação de pagamento individual.
          required:
            - consentId
            - statusUpdateDateTime
            - creationDateTime
            - expirationDateTime
            - status
            - loggedUser
            - creditor
            - payment
          properties:
            consentId:
              type: string
              maxLength: 256
              pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
              example: 'urn:bancoex:C1DD33123'
              description: |
                Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.  
                Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource 
                Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN 
                seja um identificador de recurso persistente e independente da localização.  
                Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
                - o namespace(urn)
                - o identificador associado ao namespace da instituição transnmissora (bancoex) 
                - o identificador específico dentro do namespace (C1DD33123).  
                Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
            creationDateTime:
              description: 'Data e hora em que o consentimento foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).'
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            expirationDateTime:
              description: |
                Data e hora em que o consentimento da iniciação de pagamento expira, devendo ser sempre o creationDateTime mais 5 minutos. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
                O consentimento é criado com o status AWAITING_AUTHORISATION, e deve assumir o status AUTHORIZED ou REJECTED antes do tempo de expiração - 5 minutos. Caso o tempo seja expirado, o status deve assumir REJECTED.
                Para o cenário em que o status assumiu AUTHORISED, o tempo máximo do expirationDateTime do consentimento deve assumir "now + 60 minutos". Este é o tempo para consumir o consentimento autorizado, mudando seu status para CONSUMED. Não é possível prorrogar este tempo e a criação de um novo consentimento será necessária para os cenários de insucesso.
                O tempo do expirationDateTime é garantido com os 15 minutos do access token, sendo possível utilizar mais três refresh tokens até totalizar 60 minutos.
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            statusUpdateDateTime:
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
              description: |
                Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
            status:
              $ref: '#/components/schemas/EnumAuthorisationStatusType'
            loggedUser:
              $ref: '#/components/schemas/LoggedUser'
            businessEntity:
              $ref: '#/components/schemas/BusinessEntity'
            creditor:
              $ref: '#/components/schemas/Identification'
            payment:
              $ref: '#/components/schemas/PaymentConsent'
            debtorAccount:
              $ref: '#/components/schemas/DebtorAccount'
          additionalProperties: false
        links:
          $ref: '#/components/schemas/ResponsePixPayment/properties/links'
        meta:
          $ref: '#/components/schemas/Meta'
      additionalProperties: false
    ResponsePixPayment:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          $ref: '#/components/schemas/ResponsePixPaymentData'
        links:
          type: object
          description: Referências para outros recusos da API requisitada.
          required:
            - self
          properties:
            self:
              type: string
              format: uri
              maxLength: 2000
              description: URI completo que gerou a resposta atual.
              example: 'https://api.banco.com.br/open-banking/api/v1/resource'
              pattern: '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
          additionalProperties: false
        meta:
          $ref: '#/components/schemas/Meta'
      additionalProperties: false
    ResponsePixPaymentData:
      type: object
      description: Objeto contendo dados do pagamento e da conta do recebedor (creditor).
      required:
        - paymentId
        - consentId
        - creationDateTime
        - statusUpdateDateTime
        - status
        - localInstrument
        - payment
        - creditorAccount
        - cnpjInitiator
      properties:
        paymentId:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
          example: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
          description: |
            Código ou identificador único informado pela instituição detentora da conta para representar  
            a iniciação de pagamento individual. O `paymentId` deve ser diferente do `endToEndId`.  
            Este é o identificador que deverá ser utilizado na consulta ao status da iniciação de pagamento efetuada.
        endToEndId:
          $ref: '#/components/schemas/EndToEndId'
        consentId:
          type: string
          maxLength: 256
          pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
          example: 'urn:bancoex:C1DD33123'
          description: |
            Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.  
            Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource 
            Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN 
            seja um identificador de recurso persistente e independente da localização.  
            Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
            - o namespace(urn)
            - o identificador associado ao namespace da instituição transnmissora (bancoex) 
            - o identificador específico dentro do namespace (C1DD33123).  
            Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
        creationDateTime:
          type: string
          format: date-time
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          example: '2020-07-21T08:30:00Z'
          description: |
            Data e hora em que o recurso foi criado.  
            Uma string com data e hora conforme especificação RFC-3339,  
            sempre com a utilização de timezone UTC(UTC time format).
        statusUpdateDateTime:
          type: string
          format: date-time
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          example: '2020-07-21T08:30:00Z'
          description: |
            Data e hora da última atualização da iniciação de pagamento.  
            Uma string com data e hora conforme especificação RFC-3339,  
            sempre com a utilização de timezone UTC(UTC time format).
        proxy:
          type: string
          maxLength: 77
          pattern: '[\w\W\s]*'
          example: '12345678901'
          description: |
            Chave cadastrada no DICT pertencente ao recebedor. Os tipos de chaves podem ser: telefone, e-mail, cpf/cnpj ou chave aleatória.  
            No caso de telefone celular deve ser informado no padrão E.1641.  
            Para e-mail deve ter o formato xxxxxxxx@xxxxxxx.xxx(.xx) e no máximo 77 caracteres.  
            No caso de CPF deverá ser informado com 11 números, sem pontos ou traços.  
            Para o caso de CNPJ deverá ser informado com 14 números, sem pontos ou traços.  
            No caso de chave aleatória deve ser informado o UUID gerado pelo DICT, conforme formato especificado na RFC41223.  
            Se informado, a detentora da conta deve validar o proxy no DICT quando localInstrument for igual a DICT, QRDN (uso futuro) ou QRES (uso futuro) e validar o campo creditorAccount.
            Esta validação é opcional caso o localInstrument for igual a INIC.  
            [Restrição] Se localInstrument for igual a MANU, o campo proxy não deve ser preenchido. Se localInstrument for igual INIC, DICT, QRDN (uso futuro) ou QRES(uso futuro), o campo proxy deve ser sempre preenchido com a chave Pix.
        status:
          $ref: '#/components/schemas/EnumPaymentStatusType'
        rejectionReason:
          $ref: '#/components/schemas/EnumRejectionReasonType'
        localInstrument:
          $ref: '#/components/schemas/EnumLocalInstrument'
        cnpjInitiator:
          type: string
          pattern: '^\d{14}$'
          maxLength: 14
          example: '50685362000135'
          description: CNPJ do Iniciador de Pagamento devidamente habilitado para a prestação de Serviço de Iniciação no Pix.
        payment:
          $ref: '#/components/schemas/PaymentPix'
        transactionIdentification:
          type: string
          pattern: '^[a-zA-Z0-9][a-zA-Z0-9]{0,24}$'
          maxLength: 25
          example: E00038166201907261559y6j6
          description: |
            Trata-se de um identificador de transação que deve ser retransmitido intacto pelo PSP do pagador ao gerar a ordem de pagamento. Essa informação permitirá ao recebedor identificar e correlacionar a transferência, quando recebida, com a apresentação das instruções ao pagador.
            Os caracteres permitidos no contexto do Pix para o campo txid (EMV 62-05) são:    
            - Letras minúsculas, de ‘a’ a ‘z’ 
            - Letras maiúsculas, de ‘A’ a ‘z’   
            - Dígitos decimais, de ‘0’ a ‘9’  
                
            [Restrição] Se localInstrument for igual a INIC, o campo transactionIdentification deve ser preenchido obrigatoriamente.
            Se localInstrument for igual a MANU ou DICT, o campo transactionIdentification não deve ser preenchido.
            A detentora de conta deve validar se a condicionalidade do campo foi atendida pela iniciadora de pagamento.
        remittanceInformation:
          type: string
          maxLength: 140
          pattern: '[\w\W\s]*'
          example: Pagamento da nota RSTO035-002.
          description: |
            Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
        creditorAccount:
          $ref: '#/components/schemas/CreditorAccount'
      additionalProperties: false
  parameters:
    consentId:
      name: consentId
      in: path
      description: |
        O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.  
        Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource 
        Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN 
        seja um identificador de recurso persistente e independente da localização.  
        Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
        - o namespace(urn)
        - o identificador associado ao namespace da instituição transnmissora (bancoex) 
        - o identificador específico dentro do namespace (C1DD33123).  
        Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
      required: true
      schema:
        type: string
        pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
        maxLength: 256
    paymentId:
      name: paymentId
      in: path
      description: Identificador da operação de pagamento.
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
        maxLength: 100
    Authorization:
      name: Authorization
      in: header
      description: Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
      required: true
      schema:
        type: string
        pattern: '[\w\W\s]*'
        maxLength: 2048
    xCustomerUserAgent:
      name: x-customer-user-agent
      in: header
      description: Indica o user-agent que o usuário utiliza.
      required: false
      schema:
        type: string
        pattern: '[\w\W\s]*'
        minLength: 1
        maxLength: 100
    xFapiAuthDate:
      name: x-fapi-auth-date
      in: header
      description: 'Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC'
      required: false
      schema:
        type: string
        pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        minLength: 29
        maxLength: 29
    xFapiCustomerIpAddress:
      name: x-fapi-customer-ip-address
      in: header
      description: O endereço IP do usuário se estiver atualmente logado com o receptor.
      required: false
      schema:
        type: string
        pattern: '[\w\W\s]*'
        minLength: 1
        maxLength: 100
    xFapiInteractionId:
      name: x-fapi-interaction-id
      in: header
      description: 'Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.'
      required: false
      schema:
        type: string
        pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
        minLength: 1
        maxLength: 100
    XIdempotencyKey:
      name: x-idempotency-key
      in: header
      description: Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.
      required: true
      schema:
        type: string
        maxLength: 40
        pattern: ^(?!\s)(.*)(\S)$
  responses:
    BadRequest:
      description: 'A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    Forbidden:
      description: O token tem escopo incorreto ou uma política de segurança foi violada
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    InternalServerError:
      description: Ocorreu um erro no gateway da API ou no microsserviço
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    MethodNotAllowed:
      description: O consumidor tentou acessar o recurso com um método não suportado
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    NotAcceptable:
      description: A solicitação continha um cabeçalho Accept diferente dos tipos de mídia permitidos ou um conjunto de caracteres diferente de UTF-8
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    NotFound:
      description: O recurso solicitado não existe ou não foi implementado
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    TooManyRequests:
      description: 'A operação foi recusada, pois muitas solicitações foram feitas dentro de um determinado período ou o limite global de requisições concorrentes foi atingido'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
        Retry-After:
          description: |
            Cabeçalho que indica o tempo (em segundos) que o cliente deverá aguardar para realizar uma nova tentativa de chamada. Este cabeçalho deverá estar presente quando o código HTTP de retorno for 429 Too many requests.
          schema:
            description: |
              Cabeçalho que indica o tempo (em segundos) que o cliente deverá aguardar para realizar uma nova tentativa de chamada. Este cabeçalho deverá estar presente quando o código HTTP de retorno for 429 Too many requests.
            type: integer
    UnprocessableEntityConsents:
      description: 'A solicitação foi bem formada, mas não pôde ser processada devido à lógica de negócios específica da solicitação.'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/422ResponseErrorCreateConsent'
          examples:
            Forma de pagamento inválida:
              summary: Forma de pagamento inválida
              value:
                errors:
                  - code: FORMA_PGTO_INVALIDA
                    title: Forma de pagamento inválida.
                    detail: Meio de pagamento inválido.
                meta:
                  totalRecords: 1
                  totalPages: 1
                  requestDateTime: '2021-05-21T08:30:00Z'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    UnprocessableEntityPixPayments:
      description: 'A solicitação foi bem formada, mas não pôde ser processada devido à lógica de negócios específica da solicitação.'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/422ResponseErrorCreatePixPayment'
          examples:
            Saldo insuficiente:
              summary: Saldo insuficiente
              value:
                errors:
                  - code: SALDO_INSUFICIENTE
                    title: Saldo insuficiente.
                    detail: A conta selecionada não possui saldo suficiente para realizar o pagamento.
                meta:
                  totalRecords: 1
                  totalPages: 1
                  requestDateTime: '2021-05-21T08:30:00Z'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    Unauthorized:
      description: Cabeçalho de autenticação ausente/inválido ou token inválido
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    UnsupportedMediaType:
      description: O formato do payload não é um formato suportado.
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
    201PaymentsConsentsConsentCreated:
      description: Consentimento de pagamento criado com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePaymentConsent'
    200PaymentsConsentsConsentIdRead:
      description: Dados do consentimento de pagamento obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
            maxLength: 100
            description: 'Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePaymentConsent'
    201PaymentsInitiationPixPaymentCreated:
      description: Iniciação de pagamento Pix criada com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePixPayment'
    200PaymentsInitiationPixPaymentIdRead:
      description: Dados de iniciação de pagamento Pix obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: '#/components/responses/200PaymentsConsentsConsentIdRead/headers/x-fapi-interaction-id/schema'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponsePixPayment'
