## [Em Revisão] Fluxo de Consentimento

[EM REVISÃO/ALTERAÇÃO - ABRIL DE 2021]

O fluxo de consentimento consiste no processo em que o usuário permite que a aplicação da instituição receptora tenha acesso aos dados por ele definidos. Esse consentimento deve ser requisitado ao usuário, juntamente a instituição transmissora de dados, a fim de compartilhar apenas as informações requeridas pelo usuário. Para isso, foi definido que o Open Banking Brasil utilizaria-se do padrão de Lodging Intent. Após o fluxo de consentimento completo, a aplicação da instituição receptora pode ainda não ter acesso aos dados, por regras de negócio das instituições transmissoras. As próximas seções se dedicam a explicar este fluxo por completo.

### Padrão Lodging Intent
Essa seção descreve o padrão Lodging Intent, utilizado para parametrizar solicitações de autorização OAuth complexas de maneira confiável e segura. O OAuth por si, suporta apenas autorizar ações simples de leitura, o parâmetro scope é definido por uma lista delimitada por espaços contendo strings simples, quando se trata de autorizações mais complexas, como o início de um pagamento, o suporte integrado do OAuth não é suficiente. O padrão Lodging Intent pode ser utilizado para passar informações de forma confiável para o processo de autorização, independente das restrições de comprimento de URL, enquanto as informações também são protegidas contra modificação sem a necessidade de assiná-las digitalmente, reduzindo os custos de implementação. Executar um processo de autorização utilizando o padrão Lodging Intent e o Code Flow, funciona da seguinte maneira:


* O client cria um recurso contendo todos os dados necessários para informar o processo de autorização no Authorization Server, a criação do Lodging Intent pode exigir uma autorização própria, nesse caso, o client precisa obter antecipadamente um Access Token com o escopo adequado, normalmente usando a concessão do Client Credentials com o* Authorization Server*.
* O serviço de Lodging Intent responde ao client com um id e/ou link para o recurso criado.
* O client então envia a referência do recurso com o pedido de autorização para o Authorization Server. O Authorization Server obtém os dados da transação do recurso de hospedagem e depois de autenticar o usuário, utiliza-os para apresentar uma interface de consentimento. Por exemplo, no caso de um pagamento, o Authorization Server mostra ao devedor, o valor e informações adicionais sobre a transação de pagamento ao usuário e pede o seu consentimento.
* Se o usuário consentir com a autorização solicitada, o Authorization Server associa os dados de autorização à concessão criada (ou atualizada) e os respectivos Access Tokens emitidos com base nessa concessão. Por último, o Authorization Server precisa fornecer os dados de autorização ao respectivo Resource Server, para que seja incorporado no Access Token ou na resposta de Introspection do Token.

Mais detalhes sobre o funcionamento do padrão Lodging Intent pode ser consultado em https://bitbucket.org/openid/fapi/src/master/Financial_API_Lodging_Intent.md .

### Exemplo de fluxo de consentimento

> 1: Pedido de Token para o Consentimento

``` http
POST /token HTTP/1.1
Host: as.banco.exemplo
Content-Type: application/x-www-form-urlencoded

"..."
client_id=3630BF72-E979-477A-A8FF-8A338F07C852&
grant_type=client_credentials&
scope=consents
"..."

eyJraWQiOiJOQnlW...

```

> 2: Requisição para criar um consentimento

``` http
POST /consents/v1/consents HTTP/1.1
Host: api.banco.exemplo
Content-Type:  application/json
Authorization: Bearer eyJraWQiOiJOQnlW...

{
	"data": {
		"..."
		"permissions": [
			"ACCOUNTS_READ",
			"ACCOUNTS_BALANCES_READ",
			"ACCOUNTS_TRANSACTIONS_READ"
		],
		"..."
	}
}
```

> 3: Retorno da criação do consentimento

``` http
HTTP/1.1 201 Created
Location: /consents/v1/consents/urn:bancoex:C1DD33123 HTTP/1.1
Content-Type: application/json

{
    "data": {
        "..."
        "consentId": "urn:bancoex:C1DD33123",
        "..."
}

```

> 4: Requisição com token JTW para o *Acess Token*

``` http 
GET /authorise?request=objectjwtpookdsfpmcieq-p0ok... HTTP/1.1
Host: as.banco.exemplo
...

// conteudo de exemplo do JWT enviado
{
    "..."
    "scope": "openid resources accounts consent:urn:bancoex:C1DD33123",
    "..."
}
```

O consentimento dado pelo usuário define quais informações a aplicação da instituição receptora terá acesso, mas não possui a granularidade de quais unidades de produto estão disponíveis para acesso. Essa informação cabe exclusivamente a instituição transmissora de dados. O seguinte exemplo demonstra o escopo de informações que o consentimento garante (Exemplos de codigo ao lado):

1. O usuário deseja compartilhar as informações de suas contas pré-pagas. Após o fluxo do *front-end*, a aplicação do receptor deve pedir um *token* ao *Authorisation Server* com o *scope* "*consents*".

2. Com o *token*, deve-se fazer uma requisição para a API de *Consents*, utilizando este *token* no *header*.

3. Ao receber esta requisição, a API deve retornar o identificador do pedido de consentimento.

4. Com o ID do consentimento, agora deve-se requisitar o *Access Token* que irá permitir com que a aplicação da instituição receptora consiga acessar os dados das APIs, enviando a requisição para o *Authorisation Server* com um objeto JWT contendo este ID como um escopo dinâmico.

5. Ao receber esta ultima requisição, a instituição transmissora envia uma URL de redirecionamento, onde o usuário irá escolher, dentro do ambiente da própria instituição, quais unidades de recurso ele irá compartilhar, dado este *Access token* gerado pelo pedido de consentimento. Exemplo: Neste caso apresentado após o fluxo de consentimento, o usuário escolhe dentro do ambiente da instituição transmissora quais contas ele irá compartilhar. Assim a instituição transmissora poderia ter um controle deste tipo:

| Access Token | scope | resourceId (accountId) |
|---|---|---|
| eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... | accounts | 0577979c-6db7-49da-a04f-dc4822ad9e64 |
| eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... | accounts | e5f4ac9c-87a0-403f-aef2-3e4f5977d118|


Assim que o usuário inserir quais itens ele irá compartilhar (neste exemplo, quais contas pré-pagas), o fluxo *OAuth* segue normalmente (redirecionamento do *auth_code* para a URL de *callback* e novo pedido de token ao *Authorisation Server*). 

A tabela de *scopes* e *permissions* pode ser vista [aqui] (./documents/Mapeamento_roles_permissions.xlsx).

Vale ressaltar que o consentimento, após dado do lado do app da instituição receptora, deve ser confirmado na instituição transmissora em até 60 minutos. Após este periodo, o pedido de consentimento expira.

### Acesso aos dados após o consentimento

Ao colher o consentimento do usuário e obter o *token*, a aplicação da instituição receptora pode ainda não estar apta para acessar as informações contidas dentro do escopo das permissões enviadas no pedido de consentimento. Existem diversas questões que, por regra de negócio da instituição transmissora, podem fazer com que a aplicação da receptora não tenha acesso aos dados, como por exemplo uma autenticação de dupla alçada. Para isso, a aplicação receptora deve consultar a API de *Resources*.

O fluxo a seguir demonstra como deve ser uma consulta à API de Accounts, partindo do principio de que o *App* já tenha realizado todo o fluxo de *Authorization Code*, como descrito anteriormente, e portanto, já esteja de posse de um *token* de acesso válido. Vale lembrar que a API de *Accounts* é apenas um exemplo. Qualquer outra API de *Data sharing* segue o mesmo conceito.

![Fluxo de acesso a API de Accounts](./images/security/Fluxo_Resources.png)

1. *App*, em posse de um *token* válido, requisita a API de *Resources* a informação de quais recursos o *token* enviado tem acesso;
2.  API de *Resources* devolve essa informação, juntamente com o *status* de cada recurso (Se está disponível, esperando autorização da outra alçada, etc);
3. Recebendo a resposta da API de *Resources* de que o recurso de *Accounts* está disponível, o *App* acessa a API de *Accounts* diretamente, utilizando o mesmo *token*;
4. Com os recursos disponíveis, a API de *Accounts* retorna os dados requeridos corretamente.

Alguns pontos devem ser destacados:
* Caso a API de *Resources* mostre recursos indisponíveis por qualquer motivo, as APIs de *Data sharing* não vão retornar nenhum item em suas consultas;
* O *App* da instituição receptora pode acessar diretamente as APIs de *Data sharing*, sem qualquer quebra do fluxo de acesso ao dado. Porém, recomenda-se o acesso à API de *Resources* para que se garanta uma conexão mais efetiva e assertiva;
* Caso a API de *Resources* traga status de bloqueio temporário de recurso, o *App* da instituição receptora pode acabar realizando um *pooling* para verificar quando o recurso estará disponível, respeitando sempre os limites de tráfego dispostos na seção específica deste portal.

### Revogação do Consentimento

Pedidos de revogação de consentimentos feitos pelo usuário final por meio de API´s da instituição receptora devem obrigatoriamente implicar na revogação dos tokens de acesso e de consentimento relacionados por meio de chamadas executadas no servidor de autorização da instituição transmissora responsável pelo consentimento e/ou em API de consentimento mantida pelo transmissor. A instituição transmissora deve disponibilizar, por meio de API específica para o controle de consentimentos, interface que permita à instituição receptora detentora de consentimentos a verificação do seu estado. O acesso à API de consentimento deve ser precedido de autenticação e a consulta deve ser restrita ao consentimento a que a instituição receptora teve autorização prévia para acesso, com vistas a garantir que apenas a instituição receptora que registrou o pedido de consentimento possa realizar a consulta sobre o seu estado. A instituição receptora de dados detentora de consentimentos e de tokens de autorização deve revogá-los, por meio de chamadas específicas às API´s das instituições transmissoras publicadas para esse fim, quando perceber violações à confidencialidade dos tokens ou no fim da prestação dos serviços ao usuário final.

De acordo com a Resolução Conjunta Nº 1, tanto a instituição receptora quanto a transmissora devem possuir interfaces onde um consentimento pode ser imediatamente revogado pelo usuário (Art. 15). A partir do momento em que o consentimento for revogado, seu token perde validade. Assim, ao tentar acessar qualquer recurso, a API consultada deve retornar o *HTTP Status 401*. 

### Atualização do Consentimento

Deve-se levar em conta, como definido no [Manual do Usuário](https://openbanking-brasil.github.io/areadesenvolvedor/documents/GuiaDeExperienciaDoUsuarioCompartilhamentoDeDadosEIniciacaoDePagamento.pdf), que ao se atualizar um consentimento, se realiza a deleção do consentimento anterior, e cria-se um novo consentimento, que contemple as alterações feitas pelo usuário.
