
<h1 id="fase-3-apis-do-open-banking-brasil">Fase 3 - APIs do Open Banking Brasil v1.0.0-rc1.0</h1>

> Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.

Na fase 3 do Open Banking Brasil, a iniciação de pagamento permitirá que o cliente solicite um pagamento Pix fora dos canais da detentora de conta através de uma iniciadora de transação de pagamento.  
A solicitação de pagamento será processada apenas se o cliente consentir na iniciadora, através da API de consentimento fase 3, e autorizar na detentora de conta, por meio de autenticação com credenciais de acesso e confirmação dos dados do pagamento.  
Diferente da fase 2, o consentimento é dado para cada transação e não pode ser revogado, pois é consumido no momento que a transação é confirmada e processada.  
O processamento da transação é feito de forma instantânea, não sendo possível agendamentos.

###Idempotência
Segundo a W3C, "um método HTTP idempotente é um método HTTP que pode ser chamado muitas vezes sem resultados diferentes ou efeitos colaterais. Não importa se o método é chamado apenas uma vez ou dez vezes. O resultado deve ser o mesmo. Essencialmente, significa que o resultado de uma solicitação executada com sucesso é independente do número de vezes que ela é executada. Por exemplo, na aritmética, adicionar zero a um número é uma operação idempotente."

Os conhecidos métodos GET, PUT e DELETE são naturalmente idempotentes, assim como HEAD, OPTIONS e TRACE também são.

Porém, o método POST requer um tratamento especial para que se torne idempotente e, por estarmos tratando aqui de meios de pagamentos, fazer esse tratamento é algo desejável para que não ocorram acidentes.

####Por que é necessário tratarmos a Idempotência do POST?

Imagine que seja realizado um POST de pagamento e, depois de alguns segundos, é retornada uma mensagem de Timeout. Nesse caso, não é possível saber se o POST foi efetivo e enviar o POST novamente, sem tratar a idempotência, poderá ocasionar em uma duplicidade de pagamento.

####Como mitigarmos esse risco?

Do lado da iniciadora do pagamento: É necessário que seja enviado o POST com um GUID de Idempotência. Caso o mesmo POST seja reenviado por acidente ou precise ser reenviado, por qualquer motivo que seja, basta reenviar o POST com o mesmo GUID de Idempotência.

Do lado da detentora da conta: É necessário validar o GUID de Idempotência recebido. Caso tenha recebido o mesmo GUID de Idempotência, a nova mensagem de POST deverá ser descartada.

Importante reforçar que cada nova transação com POST deverá ter um novo GUID de Idempotência.

A iniciadora não deve usar comportamento idempotente do POST para pesquisar o status dos recursos.

###Diagrama de Sequência
![Iniciacao_de_Pagamento](images/sequence-diagrams/iniciacao_de_pagamento.png)
<a href="images/sequence-diagrams/iniciacao_de_pagamento.png" target="_blank">Download do Diagrama de Sequência</a>

###[A deliberar CD] Recomendação uso de pooling
A consulta via GET, para verificar o processamento da transação, pode ser dado a qualquer momento desde que se respeite o rate limit, de:  
- 300 TPS global, 50 TPS por instituição e 8 TPS por endereço IP (Internet Protocol)  
Como sugestão, é indicado que a instituição iniciadora do pagamento implemente um retry exponencial.

<h1 id="fase-3-apis-do-open-banking-brasil-api-consentimento-de-inicia-o-de-pagamentos">API - Consentimento de Iniciação de Pagamentos</h1>

|Versão|
|:-----|
|1     |

#### Visão Geral

A API tem como objetivo coletar o consentimento para iniciação de pagamento entre bancos e instituições financeiras e acessível também à estabelecimentos comerciais participantes do Open Banking Brasil.

É possível realizar a coleta do consentimento para iniciação de pagamento (não possuindo restrição de uso entre pessoa física e pessoa jurídica) mediante a integração entre as instituições autorizadas.

#### Especificação em OAS 3.0

<a href="swagger/swagger_payments_consents_apis.yaml" target="_blank">Download da Especificação (OAS 3.0)</a>  

<a href="https://editor.swagger.io/?url=swagger/swagger_payments_consents_apis.yaml" target="_blank">Abrir Especificação no Swagger Editor</a>

## [Em Revisão] Criar consentimento para iniciação de pagamento.

<a id="opIdpaymentsConsentsPostConsents"></a>

> Exemplo de código

```javascript
const data = JSON.stringify({
  "data": {
    "creditor": {
      "personType": "PESSOA_NATURAL",
      "cpfCnpj": "58764789000137",
      "name": "Marco Antonio de Brito"
    },
    "payment": {
      "type": "PIX",
      "dateTime": "2021-01-01T00:00:00Z",
      "currency": "BRL",
      "amount": 100000.12
    },
    "debtorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://example.com/payments-consents/v1/consents");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("Accept", "application/json");
xhr.setRequestHeader("Authorization", "string");
xhr.setRequestHeader("x-fapi-auth-date", "stringstringstringstringstrin");
xhr.setRequestHeader("x-fapi-customer-ip-address", "string");
xhr.setRequestHeader("x-fapi-interaction-id", "string");
xhr.setRequestHeader("x-customer-user-agent", "string");
xhr.setRequestHeader("x-idempotency-key", "string");
xhr.setRequestHeader("x-jws-signature", "string");

xhr.send(data);
```

```python
import http.client

conn = http.client.HTTPSConnection("example.com")

payload = "{\"data\":{\"creditor\":{\"personType\":\"PESSOA_NATURAL\",\"cpfCnpj\":\"58764789000137\",\"name\":\"Marco Antonio de Brito\"},\"payment\":{\"type\":\"PIX\",\"dateTime\":\"2021-01-01T00:00:00Z\",\"currency\":\"BRL\",\"amount\":100000.12},\"debtorAccount\":{\"ispb\":\"12345678\",\"branchCode\":\"1774\",\"number\":\"1234567890\",\"checkDigit\":\"1234\",\"accountType\":\"CACC\"}}}"

headers = {
    'Content-Type': "application/json",
    'Accept': "application/json",
    'Authorization': "string",
    'x-fapi-auth-date': "stringstringstringstringstrin",
    'x-fapi-customer-ip-address': "string",
    'x-fapi-interaction-id': "string",
    'x-customer-user-agent': "string",
    'x-idempotency-key': "string",
    'x-jws-signature': "string"
    }

conn.request("POST", "/payments-consents/v1/consents", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

```java
HttpResponse<String> response = Unirest.post("https://example.com/payments-consents/v1/consents")
  .header("Content-Type", "application/json")
  .header("Accept", "application/json")
  .header("Authorization", "string")
  .header("x-fapi-auth-date", "stringstringstringstringstrin")
  .header("x-fapi-customer-ip-address", "string")
  .header("x-fapi-interaction-id", "string")
  .header("x-customer-user-agent", "string")
  .header("x-idempotency-key", "string")
  .header("x-jws-signature", "string")
  .body("{\"data\":{\"creditor\":{\"personType\":\"PESSOA_NATURAL\",\"cpfCnpj\":\"58764789000137\",\"name\":\"Marco Antonio de Brito\"},\"payment\":{\"type\":\"PIX\",\"dateTime\":\"2021-01-01T00:00:00Z\",\"currency\":\"BRL\",\"amount\":100000.12},\"debtorAccount\":{\"ispb\":\"12345678\",\"branchCode\":\"1774\",\"number\":\"1234567890\",\"checkDigit\":\"1234\",\"accountType\":\"CACC\"}}}")
  .asString();
```

`POST /payments-consents/v1/consents`

Método para a criação do consentimento para iniciação de pagamento.

### Dicionário de dados

<a href='dictionary/paymentsConsentsPostConsents_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

> Body parameter

```json
{
  "data": {
    "creditor": {
      "personType": "PESSOA_NATURAL",
      "cpfCnpj": "58764789000137",
      "name": "Marco Antonio de Brito"
    },
    "payment": {
      "type": "PIX",
      "dateTime": "2021-01-01T00:00:00Z",
      "currency": "BRL",
      "amount": 100000.12
    },
    "debtorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}
```

<h3 id="[em-revisão]-criar-consentimento-para-iniciação-de-pagamento.-parameters">Parâmetros</h3>

|Nome|Origem|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|Authorization|header|string|true|Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado|
|x-fapi-auth-date|header|string|false|Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC|
|x-fapi-customer-ip-address|header|string|false|O endereço IP do usuário se estiver atualmente logado com o receptor.|
|x-fapi-interaction-id|header|string|false|Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.|
|x-customer-user-agent|header|string|false|Indica o user-agent que o usuário utiliza.|
|x-idempotency-key|header|string|true|Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.|
|x-jws-signature|header|string|true|Cabeçalho contendo uma assinatura JWS separada do corpo do payload.|
|body|body|[CreatePaymentConsent](#schemacreatepaymentconsent)|true|Payload para criação do consentimento para iniciação do pagamento Pix.|

> O comando acima retorna uma estrutura json como essa:

> 201 Response

```json
{
  "data": {
    "consentId": "8d886d81-3a1f-48d2-bc15-a19f1f777867",
    "status": "AUTHORISED",
    "creditor": {
      "personType": "PESSOA_NATURAL",
      "cpfCnpj": "58764789000137",
      "name": "Marco Antonio de Brito"
    },
    "payment": {
      "type": "PIX",
      "dateTime": "2021-01-01T00:00:00Z",
      "currency": "BRL",
      "amount": 100000.12
    },
    "debtorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}
```

> A solicitação foi bem formada, mas não pôde ser processada devido à lógica de negócios específica da solicitação.

```json
{
  "errors": [
    {
      "code": "1",
      "title": "Saldo insuficiente",
      "detail": "Esta conta não possui saldo suficiente para realizar o pagamento."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "2",
      "title": "Beneficiário incompatível",
      "detail": "O beneficiário informado no consentimento não é o mesmo do esperado pelo DICT."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "3",
      "title": "Valor da transação incompatível",
      "detail": "O valor informado no consentimento não é o mesmo valor do informado no payload de pagamento."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "4",
      "title": "Limite acima do limite estabelecido",
      "detail": "O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "5",
      "title": "Valor inválido",
      "detail": "O valor enviado não é válido para o QR Code (ou boleto) informado."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "6",
      "title": "Cobrança inválida",
      "detail": "Validação de expiração, validação de vencimento, Status Válido."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "7",
      "title": "Consentimento inválido",
      "detail": "Consentimento inválido status não é Authorised ou está expirado."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "8",
      "title": "Janela de operação inválida",
      "detail": "Requisição está fora da janela de funcionamento."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "99",
      "title": "Desconhecido",
      "detail": "Não informada pela detentora de conta."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

<h3 id="[em-revisão]-criar-consentimento-para-iniciação-de-pagamento.-responses">Resposta</h3>

|Status|Significado|Descrição|Schema|
|---|---|---|---|
|201|[Created](https://tools.ietf.org/html/rfc7231#section-6.3.2)|Consentimento de pagamento criado com sucesso.|[ResponsePaymentConsent](#schemaresponsepaymentconsent)|
|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.|[ResponseError](#schemaresponseerror)|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Cabeçalho de autenticação ausente/inválido ou token inválido|[ResponseError](#schemaresponseerror)|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|O token tem escopo incorreto ou uma política de segurança foi violada|[ResponseError](#schemaresponseerror)|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|O recurso solicitado não existe ou não foi implementado|[ResponseError](#schemaresponseerror)|
|405|[Method Not Allowed](https://tools.ietf.org/html/rfc7231#section-6.5.5)|O consumidor tentou acessar o recurso com um método não suportado|[ResponseError](#schemaresponseerror)|
|406|[Not Acceptable](https://tools.ietf.org/html/rfc7231#section-6.5.6)|A solicitação continha um cabeçalho Accept diferente dos tipos de mídia permitidos ou um conjunto de caracteres diferente de UTF-8|[ResponseError](#schemaresponseerror)|
|415|[Unsupported Media Type](https://tools.ietf.org/html/rfc7231#section-6.5.13)|O formato do payload não é um formato suportado.|[ResponseError](#schemaresponseerror)|
|422|[Unprocessable Entity](https://tools.ietf.org/html/rfc2518#section-10.3)|A solicitação foi bem formada, mas não pôde ser processada devido à lógica de negócios específica da solicitação.|[ResponseError](#schemaresponseerror)|
|429|[Too Many Requests](https://tools.ietf.org/html/rfc6585#section-4)|A operação foi recusada, pois muitas solicitações foram feitas dentro de um determinado período ou o limite global de requisições concorrentes foi atingido|[ResponseError](#schemaresponseerror)|
|500|[Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1)|Ocorreu um erro no gateway da API ou no microsserviço|[ResponseError](#schemaresponseerror)|
|default|Default|Erro inesperado.|[ResponseError](#schemaresponseerror)|

### Response Headers

|Status|Header|Type|Format|Description|
|---|---|---|---|---|
|201|x-fapi-interaction-id|string||none|

<aside class="warning">
Para realizar esta operação, você deve ser autenticado por meio de um dos seguintes métodos:
None ( Scopes: openId payments-consents )
</aside>

## [Em Revisão] Consultar consentimento para iniciação de pagamento.

<a id="opIdpaymentsConsentsGetConsentsConsentId"></a>

> Exemplo de código

```javascript
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://example.com/payments-consents/v1/consents/string");
xhr.setRequestHeader("Accept", "application/json");
xhr.setRequestHeader("Authorization", "string");
xhr.setRequestHeader("x-fapi-auth-date", "stringstringstringstringstrin");
xhr.setRequestHeader("x-fapi-customer-ip-address", "string");
xhr.setRequestHeader("x-fapi-interaction-id", "string");
xhr.setRequestHeader("x-customer-user-agent", "string");
xhr.setRequestHeader("x-jws-signature", "string");

xhr.send(data);
```

```python
import http.client

conn = http.client.HTTPSConnection("example.com")

headers = {
    'Accept': "application/json",
    'Authorization': "string",
    'x-fapi-auth-date': "stringstringstringstringstrin",
    'x-fapi-customer-ip-address': "string",
    'x-fapi-interaction-id': "string",
    'x-customer-user-agent': "string",
    'x-jws-signature': "string"
    }

conn.request("GET", "/payments-consents/v1/consents/string", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

```java
HttpResponse<String> response = Unirest.get("https://example.com/payments-consents/v1/consents/string")
  .header("Accept", "application/json")
  .header("Authorization", "string")
  .header("x-fapi-auth-date", "stringstringstringstringstrin")
  .header("x-fapi-customer-ip-address", "string")
  .header("x-fapi-interaction-id", "string")
  .header("x-customer-user-agent", "string")
  .header("x-jws-signature", "string")
  .asString();
```

`GET /payments-consents/v1/consents/{consentId}`

Método para consultar o consentimento para iniciação de pagamento.

### Dicionário de dados

<a href='dictionary/paymentsConsentsGetConsentsConsentId_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

<h3 id="[em-revisão]-consultar-consentimento-para-iniciação-de-pagamento.-parameters">Parâmetros</h3>

|Nome|Origem|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|consentId|path|string|true|Identificador do consentimento.|
|Authorization|header|string|true|Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado|
|x-fapi-auth-date|header|string|false|Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC|
|x-fapi-customer-ip-address|header|string|false|O endereço IP do usuário se estiver atualmente logado com o receptor.|
|x-fapi-interaction-id|header|string|false|Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.|
|x-customer-user-agent|header|string|false|Indica o user-agent que o usuário utiliza.|
|x-jws-signature|header|string|true|Cabeçalho contendo uma assinatura JWS separada do corpo do payload.|

> O comando acima retorna uma estrutura json como essa:

> 200 Response

```json
{
  "data": {
    "consentId": "8d886d81-3a1f-48d2-bc15-a19f1f777867",
    "status": "AUTHORISED",
    "creditor": {
      "personType": "PESSOA_NATURAL",
      "cpfCnpj": "58764789000137",
      "name": "Marco Antonio de Brito"
    },
    "payment": {
      "type": "PIX",
      "dateTime": "2021-01-01T00:00:00Z",
      "currency": "BRL",
      "amount": 100000.12
    },
    "debtorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}
```

<h3 id="[em-revisão]-consultar-consentimento-para-iniciação-de-pagamento.-responses">Resposta</h3>

|Status|Significado|Descrição|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Dados do consentimento de pagamento obtidos com sucesso.|[ResponsePaymentConsent](#schemaresponsepaymentconsent)|
|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.|[ResponseError](#schemaresponseerror)|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Cabeçalho de autenticação ausente/inválido ou token inválido|[ResponseError](#schemaresponseerror)|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|O token tem escopo incorreto ou uma política de segurança foi violada|[ResponseError](#schemaresponseerror)|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|O recurso solicitado não existe ou não foi implementado|[ResponseError](#schemaresponseerror)|
|405|[Method Not Allowed](https://tools.ietf.org/html/rfc7231#section-6.5.5)|O consumidor tentou acessar o recurso com um método não suportado|[ResponseError](#schemaresponseerror)|
|406|[Not Acceptable](https://tools.ietf.org/html/rfc7231#section-6.5.6)|A solicitação continha um cabeçalho Accept diferente dos tipos de mídia permitidos ou um conjunto de caracteres diferente de UTF-8|[ResponseError](#schemaresponseerror)|
|415|[Unsupported Media Type](https://tools.ietf.org/html/rfc7231#section-6.5.13)|O formato do payload não é um formato suportado.|[ResponseError](#schemaresponseerror)|
|429|[Too Many Requests](https://tools.ietf.org/html/rfc6585#section-4)|A operação foi recusada, pois muitas solicitações foram feitas dentro de um determinado período ou o limite global de requisições concorrentes foi atingido|[ResponseError](#schemaresponseerror)|
|500|[Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1)|Ocorreu um erro no gateway da API ou no microsserviço|[ResponseError](#schemaresponseerror)|
|default|Default|Erro inesperado.|[ResponseError](#schemaresponseerror)|

### Response Headers

|Status|Header|Type|Format|Description|
|---|---|---|---|---|
|200|x-fapi-interaction-id|string||none|

<aside class="warning">
Para realizar esta operação, você deve ser autenticado por meio de um dos seguintes métodos:
None ( Scopes: openId payments-consents )
</aside>

<h1 id="fase-3-apis-do-open-banking-brasil-api-inicia-o-de-pagamentos">API - Iniciação de Pagamentos</h1>

|Versão|
|:-----|
|1     |

#### Visão Geral

A API tem como objetivo permitir a relação entre a iniciadora de transação de pagamento e a instituição detentora de conta para a solicitação de um pagamento pelo Open Banking Brasil.        
O recurso está disponível para pagadores que possuem vínculo com uma instituição detentora de conta participante do Open Banking, independentemente de serem pessoa física ou jurídica.

#### Especificação em OAS 3.0

<a href="swagger/swagger_payments_initiation_apis.yaml" target="_blank">Download da Especificação (OAS 3.0)</a>  

<a href="https://editor.swagger.io/?url=swagger/swagger_payments_initiation_apis.yaml" target="_blank">Abrir Especificação no Swagger Editor</a>

## [Em Revisão] Pix - Criar iniciação de pagamento.

<a id="opIdpaymentsInitiationPostPixPayments"></a>

> Exemplo de código

```javascript
const data = JSON.stringify({
  "data": {
    "payment": {
      "amount": 100000.12,
      "currency": "BRL"
    },
    "creditorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    },
    "additionalInfo": "Descrição da Transação",
    "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
    "pixKey": "12345678901"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://example.com/payments/v1/pix/payments");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("Accept", "application/json");
xhr.setRequestHeader("Authorization", "string");
xhr.setRequestHeader("x-fapi-auth-date", "stringstringstringstringstrin");
xhr.setRequestHeader("x-fapi-customer-ip-address", "string");
xhr.setRequestHeader("x-fapi-interaction-id", "string");
xhr.setRequestHeader("x-customer-user-agent", "string");
xhr.setRequestHeader("x-idempotency-key", "string");
xhr.setRequestHeader("x-jws-signature", "string");

xhr.send(data);
```

```python
import http.client

conn = http.client.HTTPSConnection("example.com")

payload = "{\"data\":{\"payment\":{\"amount\":100000.12,\"currency\":\"BRL\"},\"creditorAccount\":{\"ispb\":\"12345678\",\"branchCode\":\"1774\",\"number\":\"1234567890\",\"checkDigit\":\"1234\",\"accountType\":\"CACC\"},\"additionalInfo\":\"Descrição da Transação\",\"qrCode\":\"00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \\nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \\n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \\nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\\n\",\"pixKey\":\"12345678901\"}}"

headers = {
    'Content-Type': "application/json",
    'Accept': "application/json",
    'Authorization': "string",
    'x-fapi-auth-date': "stringstringstringstringstrin",
    'x-fapi-customer-ip-address': "string",
    'x-fapi-interaction-id': "string",
    'x-customer-user-agent': "string",
    'x-idempotency-key': "string",
    'x-jws-signature': "string"
    }

conn.request("POST", "/payments/v1/pix/payments", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

```java
HttpResponse<String> response = Unirest.post("https://example.com/payments/v1/pix/payments")
  .header("Content-Type", "application/json")
  .header("Accept", "application/json")
  .header("Authorization", "string")
  .header("x-fapi-auth-date", "stringstringstringstringstrin")
  .header("x-fapi-customer-ip-address", "string")
  .header("x-fapi-interaction-id", "string")
  .header("x-customer-user-agent", "string")
  .header("x-idempotency-key", "string")
  .header("x-jws-signature", "string")
  .body("{\"data\":{\"payment\":{\"amount\":100000.12,\"currency\":\"BRL\"},\"creditorAccount\":{\"ispb\":\"12345678\",\"branchCode\":\"1774\",\"number\":\"1234567890\",\"checkDigit\":\"1234\",\"accountType\":\"CACC\"},\"additionalInfo\":\"Descrição da Transação\",\"qrCode\":\"00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \\nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \\n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \\nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\\n\",\"pixKey\":\"12345678901\"}}")
  .asString();
```

`POST /payments/v1/pix/payments`

Método para a criação de uma iniciação de pagamento.

### Dicionário de dados

<a href='dictionary/paymentsInitiationPostPixPayments_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

### Status 422 - UnprocessableEntity Messages Pix
| Code | Title                               | Detail                                                                                                                                               |
|:----:|:------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------|
|  1   | Saldo insuficiente                  | Esta conta não possui saldo suficiente para realizar o pagamento.                                                                                    |
|  2   | Beneficiário incompatível           | O beneficiário informado no consentimento não é o mesmo do esperado pelo DICT.                                                                       |
|  3   | Valor da transação incompatível     | O valor informado no consentimento não é o mesmo valor do informado no payload de pagamento.                                                         |
|  4   | Limite acima do limite estabelecido | O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente. |
|  5   | Valor inválido                      | O valor enviado não é válido para o QR Code (ou boleto) informado.                                                                                   |
|  6   | Cobrança inválida                   | Validação de expiração, validação de vencimento, Status Válido.                                                                                      |
|  7   | Consentimento inválido              | Consentimento inválido status não é Authorised ou está expirado.                                                                                     |
|  8   | Janela de operação inválida         | Requisição está fora da janela de funcionamento.                                                                                                     |
| 99   | Desconhecido                        | Não informada pela detentora de conta.                                                                                                               |

> Body parameter

```json
{
  "data": {
    "payment": {
      "amount": 100000.12,
      "currency": "BRL"
    },
    "creditorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    },
    "additionalInfo": "Descrição da Transação",
    "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
    "pixKey": "12345678901"
  }
}
```

<h3 id="[em-revisão]-pix---criar-iniciação-de-pagamento.-parameters">Parâmetros</h3>

|Nome|Origem|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|Authorization|header|string|true|Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado|
|x-fapi-auth-date|header|string|false|Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC|
|x-fapi-customer-ip-address|header|string|false|O endereço IP do usuário se estiver atualmente logado com o receptor.|
|x-fapi-interaction-id|header|string|false|Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.|
|x-customer-user-agent|header|string|false|Indica o user-agent que o usuário utiliza.|
|x-idempotency-key|header|string|true|Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.|
|x-jws-signature|header|string|true|Cabeçalho contendo uma assinatura JWS separada do corpo do payload.|
|body|body|[CreatePixPayment](#schemacreatepixpayment)|true|Payload para criação da iniciação do pagamento Pix.|

> O comando acima retorna uma estrutura json como essa:

> 201 Response

```json
{
  "data": {
    "paymentId": "8f800dc8-bc8a-4c0e-b5e6-3c6801cfe135",
    "endToEndId": "a9ae654d-e531-4a8b-a926-952d664de203",
    "consentId": "3a782761-9573-4e1f-b4d1-4c798955c0b8",
    "creationDateTime": "2020-07-21T08:30:00Z",
    "updatedDateTime": "2020-07-21T08:30:00Z",
    "pixKey": "12345678901",
    "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
    "status": "PDNG",
    "rejectionReason": "DS27",
    "payment": {
      "amount": 100000.12,
      "currency": "BRL"
    },
    "additionalInfo": "Descrição da Transação",
    "creditorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}
```

> A solicitação foi bem formada, mas não pôde ser processada devido à lógica de negócios específica da solicitação.

```json
{
  "errors": [
    {
      "code": "1",
      "title": "Saldo insuficiente",
      "detail": "Esta conta não possui saldo suficiente para realizar o pagamento."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "2",
      "title": "Beneficiário incompatível",
      "detail": "O beneficiário informado no consentimento não é o mesmo do esperado pelo DICT."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "3",
      "title": "Valor da transação incompatível",
      "detail": "O valor informado no consentimento não é o mesmo valor do informado no payload de pagamento."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "4",
      "title": "Limite acima do limite estabelecido",
      "detail": "O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "5",
      "title": "Valor inválido",
      "detail": "O valor enviado não é válido para o QR Code (ou boleto) informado."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "6",
      "title": "Cobrança inválida",
      "detail": "Validação de expiração, validação de vencimento, Status Válido."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "7",
      "title": "Consentimento inválido",
      "detail": "Consentimento inválido status não é Authorised ou está expirado."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "8",
      "title": "Janela de operação inválida",
      "detail": "Requisição está fora da janela de funcionamento."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

```json
{
  "errors": [
    {
      "code": "99",
      "title": "Desconhecido",
      "detail": "Não informada pela detentora de conta."
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}
```

<h3 id="[em-revisão]-pix---criar-iniciação-de-pagamento.-responses">Resposta</h3>

|Status|Significado|Descrição|Schema|
|---|---|---|---|
|201|[Created](https://tools.ietf.org/html/rfc7231#section-6.3.2)|Iniciação de pagamento Pix criada com sucesso.|[ResponsePixPayment](#schemaresponsepixpayment)|
|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.|[ResponseError](#schemaresponseerror)|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Cabeçalho de autenticação ausente/inválido ou token inválido|[ResponseError](#schemaresponseerror)|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|O token tem escopo incorreto ou uma política de segurança foi violada|[ResponseError](#schemaresponseerror)|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|O recurso solicitado não existe ou não foi implementado|[ResponseError](#schemaresponseerror)|
|405|[Method Not Allowed](https://tools.ietf.org/html/rfc7231#section-6.5.5)|O consumidor tentou acessar o recurso com um método não suportado|[ResponseError](#schemaresponseerror)|
|406|[Not Acceptable](https://tools.ietf.org/html/rfc7231#section-6.5.6)|A solicitação continha um cabeçalho Accept diferente dos tipos de mídia permitidos ou um conjunto de caracteres diferente de UTF-8|[ResponseError](#schemaresponseerror)|
|415|[Unsupported Media Type](https://tools.ietf.org/html/rfc7231#section-6.5.13)|O formato do payload não é um formato suportado.|[ResponseError](#schemaresponseerror)|
|422|[Unprocessable Entity](https://tools.ietf.org/html/rfc2518#section-10.3)|A solicitação foi bem formada, mas não pôde ser processada devido à lógica de negócios específica da solicitação.|[ResponseError](#schemaresponseerror)|
|429|[Too Many Requests](https://tools.ietf.org/html/rfc6585#section-4)|A operação foi recusada, pois muitas solicitações foram feitas dentro de um determinado período ou o limite global de requisições concorrentes foi atingido|[ResponseError](#schemaresponseerror)|
|500|[Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1)|Ocorreu um erro no gateway da API ou no microsserviço|[ResponseError](#schemaresponseerror)|
|default|Default|Erro inesperado.|[ResponseError](#schemaresponseerror)|

### Response Headers

|Status|Header|Type|Format|Description|
|---|---|---|---|---|
|201|x-fapi-interaction-id|string||none|

<aside class="warning">
Para realizar esta operação, você deve ser autenticado por meio de um dos seguintes métodos:
None ( Scopes: openId payments-initiation )
</aside>

## [Em Revisão] Pix - Consultar iniciação de pagamento.

<a id="opIdpaymentsInitiationGetPixPayments"></a>

> Exemplo de código

```javascript
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://example.com/payments/v1/pix/payments/string");
xhr.setRequestHeader("Accept", "application/json");
xhr.setRequestHeader("Authorization", "string");
xhr.setRequestHeader("x-fapi-auth-date", "stringstringstringstringstrin");
xhr.setRequestHeader("x-fapi-customer-ip-address", "string");
xhr.setRequestHeader("x-fapi-interaction-id", "string");
xhr.setRequestHeader("x-customer-user-agent", "string");
xhr.setRequestHeader("x-jws-signature", "string");

xhr.send(data);
```

```python
import http.client

conn = http.client.HTTPSConnection("example.com")

headers = {
    'Accept': "application/json",
    'Authorization': "string",
    'x-fapi-auth-date': "stringstringstringstringstrin",
    'x-fapi-customer-ip-address': "string",
    'x-fapi-interaction-id': "string",
    'x-customer-user-agent': "string",
    'x-jws-signature': "string"
    }

conn.request("GET", "/payments/v1/pix/payments/string", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

```java
HttpResponse<String> response = Unirest.get("https://example.com/payments/v1/pix/payments/string")
  .header("Accept", "application/json")
  .header("Authorization", "string")
  .header("x-fapi-auth-date", "stringstringstringstringstrin")
  .header("x-fapi-customer-ip-address", "string")
  .header("x-fapi-interaction-id", "string")
  .header("x-customer-user-agent", "string")
  .header("x-jws-signature", "string")
  .asString();
```

`GET /payments/v1/pix/payments/{paymentId}`

Método para consultar uma iniciação de pagamento.

### Dicionário de dados

<a href='dictionary/paymentsInitiationGetPixPayments_v1.csv' target="_blank">Fazer download do dicionário de dados</a>

<h3 id="[em-revisão]-pix---consultar-iniciação-de-pagamento.-parameters">Parâmetros</h3>

|Nome|Origem|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|paymentId|path|string|true|Identificador da operação de pagamento.|
|Authorization|header|string|true|Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado|
|x-fapi-auth-date|header|string|false|Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC|
|x-fapi-customer-ip-address|header|string|false|O endereço IP do usuário se estiver atualmente logado com o receptor.|
|x-fapi-interaction-id|header|string|false|Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.|
|x-customer-user-agent|header|string|false|Indica o user-agent que o usuário utiliza.|
|x-jws-signature|header|string|true|Cabeçalho contendo uma assinatura JWS separada do corpo do payload.|

> O comando acima retorna uma estrutura json como essa:

> 200 Response

```json
{
  "data": {
    "paymentId": "8f800dc8-bc8a-4c0e-b5e6-3c6801cfe135",
    "endToEndId": "a9ae654d-e531-4a8b-a926-952d664de203",
    "consentId": "3a782761-9573-4e1f-b4d1-4c798955c0b8",
    "creationDateTime": "2020-07-21T08:30:00Z",
    "updatedDateTime": "2020-07-21T08:30:00Z",
    "pixKey": "12345678901",
    "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
    "status": "PDNG",
    "rejectionReason": "DS27",
    "payment": {
      "amount": 100000.12,
      "currency": "BRL"
    },
    "additionalInfo": "Descrição da Transação",
    "creditorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}
```

<h3 id="[em-revisão]-pix---consultar-iniciação-de-pagamento.-responses">Resposta</h3>

|Status|Significado|Descrição|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|Dados de iniciação de pagamento Pix obtidos com sucesso.|[ResponsePixPayment](#schemaresponsepixpayment)|
|400|[Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1)|A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.|[ResponseError](#schemaresponseerror)|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Cabeçalho de autenticação ausente/inválido ou token inválido|[ResponseError](#schemaresponseerror)|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|O token tem escopo incorreto ou uma política de segurança foi violada|[ResponseError](#schemaresponseerror)|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|O recurso solicitado não existe ou não foi implementado|[ResponseError](#schemaresponseerror)|
|405|[Method Not Allowed](https://tools.ietf.org/html/rfc7231#section-6.5.5)|O consumidor tentou acessar o recurso com um método não suportado|[ResponseError](#schemaresponseerror)|
|406|[Not Acceptable](https://tools.ietf.org/html/rfc7231#section-6.5.6)|A solicitação continha um cabeçalho Accept diferente dos tipos de mídia permitidos ou um conjunto de caracteres diferente de UTF-8|[ResponseError](#schemaresponseerror)|
|415|[Unsupported Media Type](https://tools.ietf.org/html/rfc7231#section-6.5.13)|O formato do payload não é um formato suportado.|[ResponseError](#schemaresponseerror)|
|429|[Too Many Requests](https://tools.ietf.org/html/rfc6585#section-4)|A operação foi recusada, pois muitas solicitações foram feitas dentro de um determinado período ou o limite global de requisições concorrentes foi atingido|[ResponseError](#schemaresponseerror)|
|500|[Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1)|Ocorreu um erro no gateway da API ou no microsserviço|[ResponseError](#schemaresponseerror)|
|default|Default|Erro inesperado.|[ResponseError](#schemaresponseerror)|

### Response Headers

|Status|Header|Type|Format|Description|
|---|---|---|---|---|
|200|x-fapi-interaction-id|string||none|

<aside class="warning">
Para realizar esta operação, você deve ser autenticado por meio de um dos seguintes métodos:
None ( Scopes: openId payments-initiation )
</aside>

# Schemas

<h2 id="tocS_Account">Account</h2>

<a id="schemaaccount"></a>
<a id="schema_Account"></a>
<a id="tocSaccount"></a>
<a id="tocsaccount"></a>

```json
{
  "ispb": "12345678",
  "branchCode": "1774",
  "number": "1234567890",
  "checkDigit": "1234",
  "accountType": "CACC"
}

```

Objeto que contém os dados da conta utilizada para a iniciação de pagamento.

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|ispb|string|true|Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI,  <br>no qual o usuário pagador/ recebedor detém a conta transacional.|
|branchCode|string|false|Código da Agência detentora da conta sem digito.  <br>Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito,  <br>no exercício de atividades da instituição, não podendo ser móvel ou transitória.  <br>[Restrição] Obrigatório quando tipo de conta for CACC (CONTA_DEPOSITO_A_VISTA) ou SVGS (CONTA_POUPANCA).|
|number|string|true|Número da conta do recebedor da iniciação de pagamento, sem o dígito.|
|checkDigit|string|true|Dígito da conta do recebedor da iniciação de pagamento.|
|accountType|[EnumAccountPaymentsType](#schemaenumaccountpaymentstype)|true|Tipos de contas usadas para pagamento via Pix.  <br>Modalidades tradicionais previstas pela Resolução 4.753, não contemplando contas vinculadas,  <br>conta de domiciliados no exterior, contas em moedas estrangeiras e conta correspondente moeda eletrônica.  <br>Segue descrição de cada valor do ENUM para o escopo do Pix.  <br>CACC - Current - Conta Corrente.  <br>SLRY - Salary - Conta-Salário.  <br>SVGS - Savings - Conta de Poupança.  <br>TRAN - TransactingAccount - Conta de Pagamento|

<h2 id="tocS_CreatePaymentConsent">CreatePaymentConsent</h2>

<a id="schemacreatepaymentconsent"></a>
<a id="schema_CreatePaymentConsent"></a>
<a id="tocScreatepaymentconsent"></a>
<a id="tocscreatepaymentconsent"></a>

```json
{
  "data": {
    "creditor": {
      "personType": "PESSOA_NATURAL",
      "cpfCnpj": "58764789000137",
      "name": "Marco Antonio de Brito"
    },
    "payment": {
      "type": "PIX",
      "dateTime": "2021-01-01T00:00:00Z",
      "currency": "BRL",
      "amount": 100000.12
    },
    "debtorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}

```

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|data|object|true|Objeto contendo as informações de consentimento para a iniciação de pagamento individual.|
|» creditor|[Identification](#schemaidentification)|true|Objeto contendo os dados do recebedor (creditor).|
|» payment|[PaymentConsent](#schemapaymentconsent)|true|Objeto contendo dados de pagamento para consentimento.|
|» debtorAccount|[Account](#schemaaccount)|false|Objeto que contém os dados da conta utilizada para a iniciação de pagamento.|

<h2 id="tocS_CreatePixPayment">CreatePixPayment</h2>

<a id="schemacreatepixpayment"></a>
<a id="schema_CreatePixPayment"></a>
<a id="tocScreatepixpayment"></a>
<a id="tocscreatepixpayment"></a>

```json
{
  "data": {
    "payment": {
      "amount": 100000.12,
      "currency": "BRL"
    },
    "creditorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    },
    "additionalInfo": "Descrição da Transação",
    "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
    "pixKey": "12345678901"
  }
}

```

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|data|[CreatePixPaymentData](#schemacreatepixpaymentdata)|true|Objeto contendo dados do pagamento e do recebedor (creditor).|

<h2 id="tocS_CreatePixPaymentData">CreatePixPaymentData</h2>

<a id="schemacreatepixpaymentdata"></a>
<a id="schema_CreatePixPaymentData"></a>
<a id="tocScreatepixpaymentdata"></a>
<a id="tocscreatepixpaymentdata"></a>

```json
{
  "payment": {
    "amount": 100000.12,
    "currency": "BRL"
  },
  "creditorAccount": {
    "ispb": "12345678",
    "branchCode": "1774",
    "number": "1234567890",
    "checkDigit": "1234",
    "accountType": "CACC"
  },
  "additionalInfo": "Descrição da Transação",
  "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
  "pixKey": "12345678901"
}

```

Objeto contendo dados do pagamento e do recebedor (creditor).

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|payment|[PaymentPix](#schemapaymentpix)|true|Objeto contendo dados do pagameto como moeda e valor.|
|creditorAccount|[Account](#schemaaccount)|false|Objeto que contém os dados da conta utilizada para a iniciação de pagamento.|
|additionalInfo|string|false|Determina um texto a ser apresentado ao pagador para que ele possa digitar uma informação correlata,  <br>em formato livre, a ser enviada ao recebedor.|
|qrCode|string|false|Sequência de caracteres que corresponde ao QR Code disponibilizado para o pagador.  <br>É a sequência de caracteres que seria lida pelo leitor de QR Code, e deve propiciar o retorno dos dados do pagador após consulta na DICT.  <br>Essa funcionalidade é possível tanto para QR Code estático quanto para QR Code dinâmico.  <br>No arranjo do Pix esta é a mesma sequência gerada e/ou lida pela funcionalidade Pix Copia e Cola.  <br>Este campo deverá ser no formato UTF-8|
|pixKey|string|false|Chave DICT do recebedor. Os tipos de chaves podem ser: telefone, e-mail, cpf/cnpj ou chave aleatória.  <br>O telefone celular é no padrão E.1641.  <br>O E-mail deve ter o formato xxxxxxxx@xxxxxxx.xxx(.xx) e no máximo 77 caracteres.  <br>O CPF será utilizado com 11 números e deverá ser informado sem pontos ou traços.  <br>O CNPJ será utilizado com 14 números e deverá ser informado sem pontos ou traços.  <br>A chave aleatória deve ser UUID gerado pelo DICT, conforme formato especificado na RFC41223.  <br>[Restrição] Obrigatório para pagamentos via Chave.|

<h2 id="tocS_EnumAccountPaymentsType">EnumAccountPaymentsType</h2>

<a id="schemaenumaccountpaymentstype"></a>
<a id="schema_EnumAccountPaymentsType"></a>
<a id="tocSenumaccountpaymentstype"></a>
<a id="tocsenumaccountpaymentstype"></a>

```json
"CACC"

```

Tipos de contas usadas para pagamento via Pix.  
Modalidades tradicionais previstas pela Resolução 4.753, não contemplando contas vinculadas,  
conta de domiciliados no exterior, contas em moedas estrangeiras e conta correspondente moeda eletrônica.  
Segue descrição de cada valor do ENUM para o escopo do Pix.  
CACC - Current - Conta Corrente.  
SLRY - Salary - Conta-Salário.  
SVGS - Savings - Conta de Poupança.  
TRAN - TransactingAccount - Conta de Pagamento

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|**|string|false|Tipos de contas usadas para pagamento via Pix.  <br>Modalidades tradicionais previstas pela Resolução 4.753, não contemplando contas vinculadas,  <br>conta de domiciliados no exterior, contas em moedas estrangeiras e conta correspondente moeda eletrônica.  <br>Segue descrição de cada valor do ENUM para o escopo do Pix.  <br>CACC - Current - Conta Corrente.  <br>SLRY - Salary - Conta-Salário.  <br>SVGS - Savings - Conta de Poupança.  <br>TRAN - TransactingAccount - Conta de Pagamento|

#### Enumerated Values

|Nome|Código|
|---|---|
|**|CACC|
|**|SLRY|
|**|SVGS|
|**|TRAN|

<h2 id="tocS_Identification">Identification</h2>

<a id="schemaidentification"></a>
<a id="schema_Identification"></a>
<a id="tocSidentification"></a>
<a id="tocsidentification"></a>

```json
{
  "personType": "PESSOA_NATURAL",
  "cpfCnpj": "58764789000137",
  "name": "Marco Antonio de Brito"
}

```

Objeto contendo os dados do recebedor (creditor).

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|personType|string|true|Titular, pessoa natural ou juridica a quem se referem os dados de recebedor (creditor).|
|cpfCnpj|string|true|Identificação da pessoa envolvida na transação.  <br>Preencher com o CPF ou CNPJ, de acordo com o valor escolhido no campo type.  <br>O CPF será utilizado com 11 números e deverá ser informado sem pontos ou traços.  <br>O CNPJ será utilizado com 14 números e deverá ser informado sem pontos ou traços.|
|name|string|true|Em caso de pessoa física, nome completo do titular da conta do recebedor.  <br>Em caso de pessoa jurídica, razão social da conta do recebedor.|

#### Enumerated Values

|Nome|Código|
|---|---|
|personType|PESSOA_NATURAL|
|personType|PESSOA_JURIDICA|

<h2 id="tocS_PaymentConsent">PaymentConsent</h2>

<a id="schemapaymentconsent"></a>
<a id="schema_PaymentConsent"></a>
<a id="tocSpaymentconsent"></a>
<a id="tocspaymentconsent"></a>

```json
{
  "type": "PIX",
  "dateTime": "2021-01-01T00:00:00Z",
  "currency": "BRL",
  "amount": 100000.12
}

```

Objeto contendo dados de pagamento para consentimento.

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|type|string|true|Tipos de pagamentos permitidos pelo Open Banking Brasil.|
|dateTime|string(date-time)|true|Data e hora do consentimento. <br>Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).|
|currency|string|true|Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'. <br>Todos os valores monetários informados estão representados com a moeda vigente do Brasil.|
|amount|number(double)|true|Valor da transação efetuada e convertida em moeda nacional com 2 casas decimais.|

#### Enumerated Values

|Nome|Código|
|---|---|
|type|PIX|

<h2 id="tocS_PaymentPix">PaymentPix</h2>

<a id="schemapaymentpix"></a>
<a id="schema_PaymentPix"></a>
<a id="tocSpaymentpix"></a>
<a id="tocspaymentpix"></a>

```json
{
  "amount": 100000.12,
  "currency": "BRL"
}

```

Objeto contendo dados do pagameto como moeda e valor.

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|amount|number(double)|true|Valor da iniciação de pagamento em moeda nacional com 2 casas decimais.|
|currency|string|true|Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'.  <br>Todos os valores monetários informados estão representados com a moeda vigente do Brasil.|

<h2 id="tocS_ResponseError">ResponseError</h2>

<a id="schemaresponseerror"></a>
<a id="schema_ResponseError"></a>
<a id="tocSresponseerror"></a>
<a id="tocsresponseerror"></a>

```json
{
  "errors": [
    {
      "code": "string",
      "title": "string",
      "detail": "string"
    }
  ],
  "meta": {
    "totalRecords": 1,
    "totalPages": 1,
    "requestDateTime": "2021-05-21T08:30:00Z"
  }
}

```

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|errors|[object]|true||
|» code|string|true|Código de erro específico do endpoint|
|» title|string|true|Título legível por humanos deste erro específico|
|» detail|string|true|Descrição legível por humanos deste erro específico|
|meta|[Meta](#schemameta)|false|Meta informações referente a API requisitada.|

<h2 id="tocS_ResponsePaymentConsent">ResponsePaymentConsent</h2>

<a id="schemaresponsepaymentconsent"></a>
<a id="schema_ResponsePaymentConsent"></a>
<a id="tocSresponsepaymentconsent"></a>
<a id="tocsresponsepaymentconsent"></a>

```json
{
  "data": {
    "consentId": "8d886d81-3a1f-48d2-bc15-a19f1f777867",
    "status": "AUTHORISED",
    "creditor": {
      "personType": "PESSOA_NATURAL",
      "cpfCnpj": "58764789000137",
      "name": "Marco Antonio de Brito"
    },
    "payment": {
      "type": "PIX",
      "dateTime": "2021-01-01T00:00:00Z",
      "currency": "BRL",
      "amount": 100000.12
    },
    "debtorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}

```

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|data|object|true|Objeto contendo as informações de resposta do consentimento para a iniciação de pagamento individual.|
|» consentId|string|true|Identificador único do consentimento criado para a iniciação de pagamento solicitada.|
|» status|string|true|Retorna o estado do consentimento que no momento de sua criação será AWAITING_AUTHORISATION. <br>Este estado será alterado depois da autorização do consentimento na detentora da conta  <br>do pagador (Debtor) e pode assumir os seguintes estados:<br>1. AWAITING_AUTHORISATION - Aguardando autorização<br>2. AUTHORISED - Autorizado<br>3. REJECTED - Rejeitado<br>4. REVOKED - Revogado|
|» creditor|[Identification](#schemaidentification)|true|Objeto contendo os dados do recebedor (creditor).|
|» payment|[PaymentConsent](#schemapaymentconsent)|true|Objeto contendo dados de pagamento para consentimento.|
|» debtorAccount|[Account](#schemaaccount)|false|Objeto que contém os dados da conta utilizada para a iniciação de pagamento.|

#### Enumerated Values

|Nome|Código|
|---|---|
|status|AUTHORISED|
|status|AWAITING_AUTHORISATION|
|status|REJECTED|
|status|REVOKED|

<h2 id="tocS_ResponsePixPayment">ResponsePixPayment</h2>

<a id="schemaresponsepixpayment"></a>
<a id="schema_ResponsePixPayment"></a>
<a id="tocSresponsepixpayment"></a>
<a id="tocsresponsepixpayment"></a>

```json
{
  "data": {
    "paymentId": "8f800dc8-bc8a-4c0e-b5e6-3c6801cfe135",
    "endToEndId": "a9ae654d-e531-4a8b-a926-952d664de203",
    "consentId": "3a782761-9573-4e1f-b4d1-4c798955c0b8",
    "creationDateTime": "2020-07-21T08:30:00Z",
    "updatedDateTime": "2020-07-21T08:30:00Z",
    "pixKey": "12345678901",
    "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
    "status": "PDNG",
    "rejectionReason": "DS27",
    "payment": {
      "amount": 100000.12,
      "currency": "BRL"
    },
    "additionalInfo": "Descrição da Transação",
    "creditorAccount": {
      "ispb": "12345678",
      "branchCode": "1774",
      "number": "1234567890",
      "checkDigit": "1234",
      "accountType": "CACC"
    }
  }
}

```

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|data|[ResponsePixPaymentData](#schemaresponsepixpaymentdata)|true|Objeto contendo dados do pagamento e da conta do recebedor (creditor).|

<h2 id="tocS_ResponsePixPaymentData">ResponsePixPaymentData</h2>

<a id="schemaresponsepixpaymentdata"></a>
<a id="schema_ResponsePixPaymentData"></a>
<a id="tocSresponsepixpaymentdata"></a>
<a id="tocsresponsepixpaymentdata"></a>

```json
{
  "paymentId": "8f800dc8-bc8a-4c0e-b5e6-3c6801cfe135",
  "endToEndId": "a9ae654d-e531-4a8b-a926-952d664de203",
  "consentId": "3a782761-9573-4e1f-b4d1-4c798955c0b8",
  "creationDateTime": "2020-07-21T08:30:00Z",
  "updatedDateTime": "2020-07-21T08:30:00Z",
  "pixKey": "12345678901",
  "qrCode": "00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012  \nBR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062  \n530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123AB  \nCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76\n",
  "status": "PDNG",
  "rejectionReason": "DS27",
  "payment": {
    "amount": 100000.12,
    "currency": "BRL"
  },
  "additionalInfo": "Descrição da Transação",
  "creditorAccount": {
    "ispb": "12345678",
    "branchCode": "1774",
    "number": "1234567890",
    "checkDigit": "1234",
    "accountType": "CACC"
  }
}

```

Objeto contendo dados do pagamento e da conta do recebedor (creditor).

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|paymentId|string|true|Código ou identificador único informado pela instituição que mantém a conta para representar  <br>a iniciação de pagamento individual.  <br>Esse identificador deve ser usado para consultar o status da iniciação de pagamento.|
|endToEndId|string|false|Identificador fim a fim da transação. O termo "E2E" que identifica a transação de forma única dentro do arranjo.  <br>Esse identificador deve ser único, não podendo ser repetido em qualquer outra operação enviada ao SPI.  <br>[Restrição] É obrigatório o retorno após o status "ACCEPTED_SETTLEMENT_IN_PROCESS".|
|consentId|string|true|Identificador único do consentimento criado para a iniciação de pagamento solicitada.|
|creationDateTime|string(date-time)|true|Data e hora em que o recurso foi criado.  <br>Uma string com data e hora conforme especificação RFC-3339,  <br>sempre com a utilização de timezone UTC(UTC time format).|
|updatedDateTime|string(date-time)|true|Data e hora da ultima atualização da iniciação de pagamento.  <br>Uma string com data e hora conforme especificação RFC-3339,  <br>sempre com a utilização de timezone UTC(UTC time format).|
|pixKey|string|false|Chave DICT do recebedor. Os tipos de chaves podem ser: telefone, e-mail, cpf/cnpj ou chave aleatória.  <br>O telefone celular usará o padrão E.1641.  <br>O E-mail deve ter o formato xxxxxxxx@xxxxxxx.xxx(.xx) e no máximo 77 caracteres.  <br>O CPF será utilizado com 11 números e deverá ser informado sem pontos ou traços.  <br>O CNPJ será utilizado com 14 números e deverá ser informado sem pontos ou traços.  <br>A chave aleatória deve ser UUID gerado pelo DICT, conforme formato especificado na RFC41223.  <br>[Restrição] Obrigatório para pagamentos via Chave.|
|qrCode|string|false|Sequência de caracteres que corresponde ao QR Code disponibilizado para o pagador.  <br>É a sequência de caracteres que seria lida pelo leitor de QR Code, e deve propiciar o retorno dos dados do pagador após consulta na DICT.  <br>Essa funcionalidade é possível tanto para QR Code estático quanto para QR Code dinâmico.  <br>No arranjo do Pix esta é a mesma sequência gerada e/ou lida pela funcionalidade Pix Copia e Cola.  <br>Este campo deverá ser no formato UTF-8|
|status|string|true|Estado atual da iniciação de pagamento. O estado evolui na seguinte ordem:  <br>1. PDNG (PENDING) - Iniciação de pagamento ou transação de pagamento está pendente. Checagens adicionais em realização.  <br>2. PART (PARTIALLY ACCEPTED) - Aguardando autorização múltipla alçada.  <br>3. ACSP (ACCEPTED_SETTLEMENT_IN_PROCESS) - Iniciação de pagamento aceita e processamento do pagamento foi iniciado.  <br>4. ACSC (ACCEPTED_SETTLEMENT_COMPLETED_DEBITOR_ACCOUNT) - Débito realizado na conta do pagador.  <br>5. ACCC (ACCEPTED_SETTLEMENT_COMPLETED) - Crédito realizado na instituição de destino.  <br><br>Em caso insucesso:  <br>RJCT (REJECTED) - Instrução de pagamento rejeitada.|
|rejectionReason|string|false|Motivo da rejeição do pagamento. Informações complementares sobre o motivo do status.  <br>AB03 (ABORTED_SETTLEMENT_TIMEOUT) - Liquidação da transação interrompida devido a timeout no SPI.                       <br>AB09 (ERROR_CREDITOR_AGENT) - Transação interrompida devido a erro no participante do usuário recebedor.  <br>AB11 (TIMEOUT_DEBTOR_AGENT) - Timeout do participante emissor da ordem de pagamento.  <br>AC03 (INVALID_CREDITOR_ACCOUNT_NUMBER) - Número da conta transacional do usuário recebedor inexistente ou inválido.  <br>AC06 (BLOCKED_ACCOUNT) - Conta transacional do usuário recebedor encontra-se bloqueada.  <br>AC07 (CLOSED_CREDITOR_ACCOUNT_NUMBER) - Número da conta transacional do usuário recebedor encerrada.  <br>AC14 (INVALID_CREDITOR_ACCOUNTTYPE) - Tipo incorreto para a conta transacional do usuário recebedor.    AG03 (TRANSACTION_NOT_SUPPORTED) - Tipo de transação não é suportado/autorizado na conta transacional do usuário recebedor. Exemplo: transferência para conta salário.  <br>AG12 (NOT_ALLOWED_BOOK_TRANSFER) - Não é permitida ordem de pagamento/devolução no SPI cujos recursos sejam transferidos de uma conta transacional para outra em uma mesma instituição participante ou entre participantes que utilizem o serviço de liquidação de um mesmo participante liquidante no SPI (booktransfer).  <br>AG13 (FORBIDDEN_RETURN_PAYMENT) - Não é permitido devolver a devolução de um pagamento instantâneo.  <br>AGNT (INCORRECT_AGENT) - Participante direto não é liquidante do participante do usuário pagador / participante do usuário recebedor.  <br>AM01 (ZERO_AMOUNT) - Ordem de pagamento instantâneo com valor zero.  <br>AM02 (NOT_ALLOWED_AMOUNT) - Ordem de pagamento/devolução em valor que faz superar o limite permitido para o tipo de conta transacional creditada.  <br>AM04 (INSUFFICIENT_FUNDS) - Saldo insuficiente na conta PI do participante do usuário pagador.  <br>AM09 (WRONG_AMOUNT) - Devolução de pagamento em valor que faz superar o valor da ordem de pagamento instantâneo correspondente.  <br>AM12 (INVALID_AMOUNT) - Divergência entre a somatória dos valores do bloco ‘valorDoDinheiroOuCompra’ e o campo ‘valor’.  <br>AM18 (INVALID_NUMBER_OF_TRANSACTIONS) - Quantidade de transações inválida.  <br>BE01 (INCONSISTENT_WITH_END_CUSTOMER) - CPF/CNPJ do usuário recebedor não é consistente com o titular da conta transacional especificada.  <br>BE15 (INVALID_IDENTIFICATION_CODE) - Código de situação de pagamento ou de erro inválido.  <br>BE17 (INVALID_CREDITOR_IDENTIFICATION_CODE) - QR Code rejeitado pelo participante do usuário recebedor.  <br>CH11 (CREDITOR_IDENTIFIER_INCORRECT) - CPF/CNPJ do usuário recebedor incorreto.  <br>CH16 (ELEMENT_CONTENT_FORMALLY_INCORRECT) - Elemento da mensagem incorreto.  <br>DS04 (ORDER_REJECTED) - Ordem rejeitada pelo participante do usuário recebedor.  <br>DS0G (NOT_ALLOWED_PAYMENT) - Participante que assinou a mensagem não é autorizado a realizar a operação na conta PI debitada. No caso em que o participante que assinou a mensagem não é o titular da conta PI debitada nem é o liquidante no SPI do participante do usuário pagador.  <br>DS0H (NOT_ALLOWED_ACCOUNT) - ISPB do participante que submeteu a resposta à ordem de pagamento/devolução diferente do ISPB do participante creditado pela ordem.  <br>DS27 (USER_NOT_YET_ACTIVATED) - Participante não se encontra cadastrado ou ainda não iniciou a operação no SPI.  <br>DT02 (INVALID_CREATION_DATE) - Data e Hora do envio da mensagem inválida.  <br>DT05 (INVALID_CUT_OFF_DATE) - Transação extrapola o prazo máximo para devolução de pagamento instantâneo regulamentado pelo Arranjo Pix.  <br>ED05 (SETTLEMENT_FAILED) - Erro no processamento do pagamento instantâneo.  <br>FF07 (INVALID_PURPOSE) - Inconsistência entre a finalidade da transação e o preenchimento do bloco elementos Structured.  <br>FF08 (INVALID_END_TO_END_ID) - Identificador da operação mal formatado.  <br>RC09 (INVALID_DEBTOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER) - ISPB do participante do usuário pagador inválido ou inexistente.  <br>RC10 (INVALID_CREDITOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER) - ISPB do participante do usuário recebedor inválido ou inexistente.  <br>RR4  (REGULATORY_REASON) - Ordem de pagamento em que o usuário pagador é sancionado por resolução do Conselho de Segurança das Nações Unidas (CSNU). Nos casos em que o usuário recebedor for o sancionado, a ordem de pagamento não deve ser rejeitada.  <br>SL02 (SPECIFIC_SERVICE_OFFERED_BY_CREDITOR_AGENT) - A transação original não está relacionada ao serviço de Saque Pix.  <br>[Restrição] Esse motivo deverá ser enviado quando o campo /data/status for igual a RJCT (REJECTED).|
|payment|[PaymentPix](#schemapaymentpix)|true|Objeto contendo dados do pagameto como moeda e valor.|
|additionalInfo|string|false|Descrição do pagamento, em formato livre, feito pelo pagador.|
|creditorAccount|[Account](#schemaaccount)|false|Objeto que contém os dados da conta utilizada para a iniciação de pagamento.|

#### Enumerated Values

|Nome|Código|
|---|---|
|status|PDNG|
|status|PART|
|status|ACSP|
|status|ACSC|
|status|ACCC|
|status|RJCT|
|rejectionReason|AB03|
|rejectionReason|AB09|
|rejectionReason|AB11|
|rejectionReason|AC03|
|rejectionReason|AC06|
|rejectionReason|AC07|
|rejectionReason|AC14|
|rejectionReason|AG03|
|rejectionReason|AG12|
|rejectionReason|AG13|
|rejectionReason|AGNT|
|rejectionReason|AM01|
|rejectionReason|AM02|
|rejectionReason|AM04|
|rejectionReason|AM09|
|rejectionReason|AM12|
|rejectionReason|AM18|
|rejectionReason|BE01|
|rejectionReason|BE15|
|rejectionReason|BE17|
|rejectionReason|CH11|
|rejectionReason|CH16|
|rejectionReason|DS04|
|rejectionReason|DS0G|
|rejectionReason|DS0H|
|rejectionReason|DS27|
|rejectionReason|DT02|
|rejectionReason|DT05|
|rejectionReason|ED05|
|rejectionReason|FF07|
|rejectionReason|FF08|
|rejectionReason|RC09|
|rejectionReason|RC10|
|rejectionReason|RR4|
|rejectionReason|SL02|

<h2 id="tocS_Links">Links</h2>

<a id="schemalinks"></a>
<a id="schema_Links"></a>
<a id="tocSlinks"></a>
<a id="tocslinks"></a>

```json
{
  "self": "https://api.banco.com.br/open-banking/api/v1/resource",
  "first": "https://api.banco.com.br/open-banking/api/v1/resource",
  "prev": "https://api.banco.com.br/open-banking/api/v1/resource",
  "next": "https://api.banco.com.br/open-banking/api/v1/resource",
  "last": "https://api.banco.com.br/open-banking/api/v1/resource"
}

```

Referências para outros recusos da API requisitada.

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|self|string(uri)|true|URI completo que gerou a resposta atual.|
|first|string(uri)|false|URI da primeira página que originou essa lista de resultados. Restrição - Obrigatório quando não for a primeira página da resposta|
|prev|string(uri)|false|URI da página anterior dessa lista de resultados. Restrição - 	Obrigatório quando não for a primeira página da resposta|
|next|string(uri)|false|URI da próxima página dessa lista de resultados. Restrição - Obrigatório quando não for a última página da resposta|
|last|string(uri)|false|URI da última página dessa lista de resultados. Restrição - Obrigatório quando não for a última página da resposta|

<h2 id="tocS_Meta">Meta</h2>

<a id="schemameta"></a>
<a id="schema_Meta"></a>
<a id="tocSmeta"></a>
<a id="tocsmeta"></a>

```json
{
  "totalRecords": 1,
  "totalPages": 1,
  "requestDateTime": "2021-05-21T08:30:00Z"
}

```

Meta informações referente a API requisitada.

### Propriedades

|Nome|Tipo|Obrigatório|Descrição|
|---|---|---|---|---|
|totalRecords|integer(int32)|true|Número total de registros no resultado|
|totalPages|integer(int32)|true|Número total de páginas no resultado|
|requestDateTime|string(date-time)|true|Data e hora da consulta, conforme especificação RFC-3339, formato UTC.|

